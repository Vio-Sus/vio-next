
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string | null
  emailVerified: Date | null
  password: string | null
  image: string | null
  role: Role
  company_id: number | null
}

/**
 * Model Waste
 * 
 */
export type Waste = {
  id: number
  waste: string
  waste_type: WasteType
}

/**
 * Model Entry
 * 
 */
export type Entry = {
  id: number
  collaborator: string
  created_at: Date
  updated_at: Date
  weight: number
  waste_id: number
  user_id: string
  site_id: number
  company_id: number
}

/**
 * Model Company
 * 
 */
export type Company = {
  id: number
  company: string
  admin_code: string
  user_code: string
  address_line_1: string
  address_line_2: string
  email: string
  phone: string
  city_id: number
  zip_code: string
  company_type: CompanyType
}

/**
 * Model CompanyCollaboration
 * 
 */
export type CompanyCollaboration = {
  id: number
  source_id: number
  collaborator_id: number
}

/**
 * Model Site
 * 
 */
export type Site = {
  id: number
  site: string
}

/**
 * Model City
 * 
 */
export type City = {
  id: number
  city: string
  province_id: number
}

/**
 * Model Province
 * 
 */
export type Province = {
  id: number
  province: string
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: number
  userId: string
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model testingData
 * 
 */
export type testingData = {
  id: number
  name: string
  creationTime: Date
  jsonArray: Prisma.JsonValue | null
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = {
  identifier: string
  token: string
  expires: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const CompanyType: {
  COLLECTOR: 'COLLECTOR',
  SOURCE: 'SOURCE'
};

export type CompanyType = (typeof CompanyType)[keyof typeof CompanyType]


export const Role: {
  ROOT: 'ROOT',
  ADMIN: 'ADMIN',
  USER: 'USER',
  TEMP_: 'TEMP_'
};

export type Role = (typeof Role)[keyof typeof Role]


export const WasteType: {
  GENERAL_GARBAGE: 'GENERAL_GARBAGE',
  FOODWASTE: 'FOODWASTE',
  GREENWASTE: 'GREENWASTE',
  CARDBOARD: 'CARDBOARD',
  CLEAN_WOOD: 'CLEAN_WOOD',
  MIXED_PAPER: 'MIXED_PAPER',
  MIXED_CONTAINERS: 'MIXED_CONTAINERS',
  STYROFOAM: 'STYROFOAM',
  SOFT_PLASTICS: 'SOFT_PLASTICS',
  OFPP_: 'OFPP_',
  APPLIANCES: 'APPLIANCES',
  E_WASTE: 'E_WASTE',
  LIGHTS: 'LIGHTS',
  BATTERIES: 'BATTERIES',
  MATTRESSES: 'MATTRESSES',
  GLASS: 'GLASS',
  NEW_GYPSUM: 'NEW_GYPSUM',
  METAL: 'METAL',
  CONCRETE: 'CONCRETE'
};

export type WasteType = (typeof WasteType)[keyof typeof WasteType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.waste`: Exposes CRUD operations for the **Waste** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wastes
    * const wastes = await prisma.waste.findMany()
    * ```
    */
  get waste(): Prisma.WasteDelegate<GlobalReject>;

  /**
   * `prisma.entry`: Exposes CRUD operations for the **Entry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entries
    * const entries = await prisma.entry.findMany()
    * ```
    */
  get entry(): Prisma.EntryDelegate<GlobalReject>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<GlobalReject>;

  /**
   * `prisma.companyCollaboration`: Exposes CRUD operations for the **CompanyCollaboration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyCollaborations
    * const companyCollaborations = await prisma.companyCollaboration.findMany()
    * ```
    */
  get companyCollaboration(): Prisma.CompanyCollaborationDelegate<GlobalReject>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<GlobalReject>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<GlobalReject>;

  /**
   * `prisma.province`: Exposes CRUD operations for the **Province** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Provinces
    * const provinces = await prisma.province.findMany()
    * ```
    */
  get province(): Prisma.ProvinceDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.testingData`: Exposes CRUD operations for the **testingData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TestingData
    * const testingData = await prisma.testingData.findMany()
    * ```
    */
  get testingData(): Prisma.testingDataDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Waste: 'Waste',
    Entry: 'Entry',
    Company: 'Company',
    CompanyCollaboration: 'CompanyCollaboration',
    Site: 'Site',
    City: 'City',
    Province: 'Province',
    Account: 'Account',
    Session: 'Session',
    testingData: 'testingData',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    accounts: number
    sessions: number
    entries: number
  }

  export type UserCountOutputTypeSelect = {
    accounts?: boolean
    sessions?: boolean
    entries?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type WasteCountOutputType
   */


  export type WasteCountOutputType = {
    entries: number
  }

  export type WasteCountOutputTypeSelect = {
    entries?: boolean
  }

  export type WasteCountOutputTypeGetPayload<S extends boolean | null | undefined | WasteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WasteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WasteCountOutputTypeArgs)
    ? WasteCountOutputType 
    : S extends { select: any } & (WasteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WasteCountOutputType ? WasteCountOutputType[P] : never
  } 
      : WasteCountOutputType




  // Custom InputTypes

  /**
   * WasteCountOutputType without action
   */
  export type WasteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WasteCountOutputType
     */
    select?: WasteCountOutputTypeSelect | null
  }



  /**
   * Count Type CompanyCountOutputType
   */


  export type CompanyCountOutputType = {
    users: number
    source_company: number
    collector_company: number
    entries: number
  }

  export type CompanyCountOutputTypeSelect = {
    users?: boolean
    source_company?: boolean
    collector_company?: boolean
    entries?: boolean
  }

  export type CompanyCountOutputTypeGetPayload<S extends boolean | null | undefined | CompanyCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompanyCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompanyCountOutputTypeArgs)
    ? CompanyCountOutputType 
    : S extends { select: any } & (CompanyCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompanyCountOutputType ? CompanyCountOutputType[P] : never
  } 
      : CompanyCountOutputType




  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect | null
  }



  /**
   * Count Type SiteCountOutputType
   */


  export type SiteCountOutputType = {
    entries: number
  }

  export type SiteCountOutputTypeSelect = {
    entries?: boolean
  }

  export type SiteCountOutputTypeGetPayload<S extends boolean | null | undefined | SiteCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SiteCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SiteCountOutputTypeArgs)
    ? SiteCountOutputType 
    : S extends { select: any } & (SiteCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SiteCountOutputType ? SiteCountOutputType[P] : never
  } 
      : SiteCountOutputType




  // Custom InputTypes

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect | null
  }



  /**
   * Count Type CityCountOutputType
   */


  export type CityCountOutputType = {
    Companies: number
  }

  export type CityCountOutputTypeSelect = {
    Companies?: boolean
  }

  export type CityCountOutputTypeGetPayload<S extends boolean | null | undefined | CityCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CityCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CityCountOutputTypeArgs)
    ? CityCountOutputType 
    : S extends { select: any } & (CityCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CityCountOutputType ? CityCountOutputType[P] : never
  } 
      : CityCountOutputType




  // Custom InputTypes

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect | null
  }



  /**
   * Count Type ProvinceCountOutputType
   */


  export type ProvinceCountOutputType = {
    cities: number
  }

  export type ProvinceCountOutputTypeSelect = {
    cities?: boolean
  }

  export type ProvinceCountOutputTypeGetPayload<S extends boolean | null | undefined | ProvinceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ProvinceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ProvinceCountOutputTypeArgs)
    ? ProvinceCountOutputType 
    : S extends { select: any } & (ProvinceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ProvinceCountOutputType ? ProvinceCountOutputType[P] : never
  } 
      : ProvinceCountOutputType




  // Custom InputTypes

  /**
   * ProvinceCountOutputType without action
   */
  export type ProvinceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProvinceCountOutputType
     */
    select?: ProvinceCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    company_id: number | null
  }

  export type UserSumAggregateOutputType = {
    company_id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    image: string | null
    role: Role | null
    company_id: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    image: string | null
    role: Role | null
    company_id: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    password: number
    image: number
    role: number
    company_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    company_id?: true
  }

  export type UserSumAggregateInputType = {
    company_id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    role?: true
    company_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    role?: true
    company_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    image?: true
    role?: true
    company_id?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    image: string | null
    role: Role
    company_id: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    image?: boolean
    role?: boolean
    accounts?: boolean | User$accountsArgs
    sessions?: boolean | User$sessionsArgs
    entries?: boolean | User$entriesArgs
    company?: boolean | CompanyArgs
    company_id?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    accounts?: boolean | User$accountsArgs
    sessions?: boolean | User$sessionsArgs
    entries?: boolean | User$entriesArgs
    company?: boolean | CompanyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'accounts' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'entries' ? Array < EntryGetPayload<S['include'][P]>>  :
        P extends 'company' ? CompanyGetPayload<S['include'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'accounts' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'entries' ? Array < EntryGetPayload<S['select'][P]>>  :
        P extends 'company' ? CompanyGetPayload<S['select'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    accounts<T extends User$accountsArgs= {}>(args?: Subset<T, User$accountsArgs>): Prisma.PrismaPromise<Array<AccountGetPayload<T>>| Null>;

    sessions<T extends User$sessionsArgs= {}>(args?: Subset<T, User$sessionsArgs>): Prisma.PrismaPromise<Array<SessionGetPayload<T>>| Null>;

    entries<T extends User$entriesArgs= {}>(args?: Subset<T, User$entriesArgs>): Prisma.PrismaPromise<Array<EntryGetPayload<T>>| Null>;

    company<T extends CompanyArgs= {}>(args?: Subset<T, CompanyArgs>): Prisma__CompanyClient<CompanyGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User.entries
   */
  export type User$entriesArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    where?: EntryWhereInput
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    cursor?: EntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Waste
   */


  export type AggregateWaste = {
    _count: WasteCountAggregateOutputType | null
    _avg: WasteAvgAggregateOutputType | null
    _sum: WasteSumAggregateOutputType | null
    _min: WasteMinAggregateOutputType | null
    _max: WasteMaxAggregateOutputType | null
  }

  export type WasteAvgAggregateOutputType = {
    id: number | null
  }

  export type WasteSumAggregateOutputType = {
    id: number | null
  }

  export type WasteMinAggregateOutputType = {
    id: number | null
    waste: string | null
    waste_type: WasteType | null
  }

  export type WasteMaxAggregateOutputType = {
    id: number | null
    waste: string | null
    waste_type: WasteType | null
  }

  export type WasteCountAggregateOutputType = {
    id: number
    waste: number
    waste_type: number
    _all: number
  }


  export type WasteAvgAggregateInputType = {
    id?: true
  }

  export type WasteSumAggregateInputType = {
    id?: true
  }

  export type WasteMinAggregateInputType = {
    id?: true
    waste?: true
    waste_type?: true
  }

  export type WasteMaxAggregateInputType = {
    id?: true
    waste?: true
    waste_type?: true
  }

  export type WasteCountAggregateInputType = {
    id?: true
    waste?: true
    waste_type?: true
    _all?: true
  }

  export type WasteAggregateArgs = {
    /**
     * Filter which Waste to aggregate.
     */
    where?: WasteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wastes to fetch.
     */
    orderBy?: Enumerable<WasteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WasteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wastes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wastes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wastes
    **/
    _count?: true | WasteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WasteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WasteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WasteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WasteMaxAggregateInputType
  }

  export type GetWasteAggregateType<T extends WasteAggregateArgs> = {
        [P in keyof T & keyof AggregateWaste]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWaste[P]>
      : GetScalarType<T[P], AggregateWaste[P]>
  }




  export type WasteGroupByArgs = {
    where?: WasteWhereInput
    orderBy?: Enumerable<WasteOrderByWithAggregationInput>
    by: WasteScalarFieldEnum[]
    having?: WasteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WasteCountAggregateInputType | true
    _avg?: WasteAvgAggregateInputType
    _sum?: WasteSumAggregateInputType
    _min?: WasteMinAggregateInputType
    _max?: WasteMaxAggregateInputType
  }


  export type WasteGroupByOutputType = {
    id: number
    waste: string
    waste_type: WasteType
    _count: WasteCountAggregateOutputType | null
    _avg: WasteAvgAggregateOutputType | null
    _sum: WasteSumAggregateOutputType | null
    _min: WasteMinAggregateOutputType | null
    _max: WasteMaxAggregateOutputType | null
  }

  type GetWasteGroupByPayload<T extends WasteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WasteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WasteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WasteGroupByOutputType[P]>
            : GetScalarType<T[P], WasteGroupByOutputType[P]>
        }
      >
    >


  export type WasteSelect = {
    id?: boolean
    waste?: boolean
    waste_type?: boolean
    entries?: boolean | Waste$entriesArgs
    _count?: boolean | WasteCountOutputTypeArgs
  }


  export type WasteInclude = {
    entries?: boolean | Waste$entriesArgs
    _count?: boolean | WasteCountOutputTypeArgs
  }

  export type WasteGetPayload<S extends boolean | null | undefined | WasteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Waste :
    S extends undefined ? never :
    S extends { include: any } & (WasteArgs | WasteFindManyArgs)
    ? Waste  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'entries' ? Array < EntryGetPayload<S['include'][P]>>  :
        P extends '_count' ? WasteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WasteArgs | WasteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'entries' ? Array < EntryGetPayload<S['select'][P]>>  :
        P extends '_count' ? WasteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Waste ? Waste[P] : never
  } 
      : Waste


  type WasteCountArgs = 
    Omit<WasteFindManyArgs, 'select' | 'include'> & {
      select?: WasteCountAggregateInputType | true
    }

  export interface WasteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Waste that matches the filter.
     * @param {WasteFindUniqueArgs} args - Arguments to find a Waste
     * @example
     * // Get one Waste
     * const waste = await prisma.waste.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WasteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WasteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Waste'> extends True ? Prisma__WasteClient<WasteGetPayload<T>> : Prisma__WasteClient<WasteGetPayload<T> | null, null>

    /**
     * Find one Waste that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WasteFindUniqueOrThrowArgs} args - Arguments to find a Waste
     * @example
     * // Get one Waste
     * const waste = await prisma.waste.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WasteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WasteFindUniqueOrThrowArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Find the first Waste that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteFindFirstArgs} args - Arguments to find a Waste
     * @example
     * // Get one Waste
     * const waste = await prisma.waste.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WasteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WasteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Waste'> extends True ? Prisma__WasteClient<WasteGetPayload<T>> : Prisma__WasteClient<WasteGetPayload<T> | null, null>

    /**
     * Find the first Waste that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteFindFirstOrThrowArgs} args - Arguments to find a Waste
     * @example
     * // Get one Waste
     * const waste = await prisma.waste.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WasteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WasteFindFirstOrThrowArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Find zero or more Wastes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wastes
     * const wastes = await prisma.waste.findMany()
     * 
     * // Get first 10 Wastes
     * const wastes = await prisma.waste.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wasteWithIdOnly = await prisma.waste.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WasteFindManyArgs>(
      args?: SelectSubset<T, WasteFindManyArgs>
    ): Prisma.PrismaPromise<Array<WasteGetPayload<T>>>

    /**
     * Create a Waste.
     * @param {WasteCreateArgs} args - Arguments to create a Waste.
     * @example
     * // Create one Waste
     * const Waste = await prisma.waste.create({
     *   data: {
     *     // ... data to create a Waste
     *   }
     * })
     * 
    **/
    create<T extends WasteCreateArgs>(
      args: SelectSubset<T, WasteCreateArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Create many Wastes.
     *     @param {WasteCreateManyArgs} args - Arguments to create many Wastes.
     *     @example
     *     // Create many Wastes
     *     const waste = await prisma.waste.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WasteCreateManyArgs>(
      args?: SelectSubset<T, WasteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Waste.
     * @param {WasteDeleteArgs} args - Arguments to delete one Waste.
     * @example
     * // Delete one Waste
     * const Waste = await prisma.waste.delete({
     *   where: {
     *     // ... filter to delete one Waste
     *   }
     * })
     * 
    **/
    delete<T extends WasteDeleteArgs>(
      args: SelectSubset<T, WasteDeleteArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Update one Waste.
     * @param {WasteUpdateArgs} args - Arguments to update one Waste.
     * @example
     * // Update one Waste
     * const waste = await prisma.waste.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WasteUpdateArgs>(
      args: SelectSubset<T, WasteUpdateArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Delete zero or more Wastes.
     * @param {WasteDeleteManyArgs} args - Arguments to filter Wastes to delete.
     * @example
     * // Delete a few Wastes
     * const { count } = await prisma.waste.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WasteDeleteManyArgs>(
      args?: SelectSubset<T, WasteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wastes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wastes
     * const waste = await prisma.waste.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WasteUpdateManyArgs>(
      args: SelectSubset<T, WasteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Waste.
     * @param {WasteUpsertArgs} args - Arguments to update or create a Waste.
     * @example
     * // Update or create a Waste
     * const waste = await prisma.waste.upsert({
     *   create: {
     *     // ... data to create a Waste
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Waste we want to update
     *   }
     * })
    **/
    upsert<T extends WasteUpsertArgs>(
      args: SelectSubset<T, WasteUpsertArgs>
    ): Prisma__WasteClient<WasteGetPayload<T>>

    /**
     * Count the number of Wastes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteCountArgs} args - Arguments to filter Wastes to count.
     * @example
     * // Count the number of Wastes
     * const count = await prisma.waste.count({
     *   where: {
     *     // ... the filter for the Wastes we want to count
     *   }
     * })
    **/
    count<T extends WasteCountArgs>(
      args?: Subset<T, WasteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WasteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Waste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WasteAggregateArgs>(args: Subset<T, WasteAggregateArgs>): Prisma.PrismaPromise<GetWasteAggregateType<T>>

    /**
     * Group by Waste.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WasteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WasteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WasteGroupByArgs['orderBy'] }
        : { orderBy?: WasteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WasteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWasteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Waste.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WasteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    entries<T extends Waste$entriesArgs= {}>(args?: Subset<T, Waste$entriesArgs>): Prisma.PrismaPromise<Array<EntryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Waste base type for findUnique actions
   */
  export type WasteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter, which Waste to fetch.
     */
    where: WasteWhereUniqueInput
  }

  /**
   * Waste findUnique
   */
  export interface WasteFindUniqueArgs extends WasteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Waste findUniqueOrThrow
   */
  export type WasteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter, which Waste to fetch.
     */
    where: WasteWhereUniqueInput
  }


  /**
   * Waste base type for findFirst actions
   */
  export type WasteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter, which Waste to fetch.
     */
    where?: WasteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wastes to fetch.
     */
    orderBy?: Enumerable<WasteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wastes.
     */
    cursor?: WasteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wastes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wastes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wastes.
     */
    distinct?: Enumerable<WasteScalarFieldEnum>
  }

  /**
   * Waste findFirst
   */
  export interface WasteFindFirstArgs extends WasteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Waste findFirstOrThrow
   */
  export type WasteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter, which Waste to fetch.
     */
    where?: WasteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wastes to fetch.
     */
    orderBy?: Enumerable<WasteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wastes.
     */
    cursor?: WasteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wastes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wastes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wastes.
     */
    distinct?: Enumerable<WasteScalarFieldEnum>
  }


  /**
   * Waste findMany
   */
  export type WasteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter, which Wastes to fetch.
     */
    where?: WasteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wastes to fetch.
     */
    orderBy?: Enumerable<WasteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wastes.
     */
    cursor?: WasteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wastes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wastes.
     */
    skip?: number
    distinct?: Enumerable<WasteScalarFieldEnum>
  }


  /**
   * Waste create
   */
  export type WasteCreateArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * The data needed to create a Waste.
     */
    data: XOR<WasteCreateInput, WasteUncheckedCreateInput>
  }


  /**
   * Waste createMany
   */
  export type WasteCreateManyArgs = {
    /**
     * The data used to create many Wastes.
     */
    data: Enumerable<WasteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Waste update
   */
  export type WasteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * The data needed to update a Waste.
     */
    data: XOR<WasteUpdateInput, WasteUncheckedUpdateInput>
    /**
     * Choose, which Waste to update.
     */
    where: WasteWhereUniqueInput
  }


  /**
   * Waste updateMany
   */
  export type WasteUpdateManyArgs = {
    /**
     * The data used to update Wastes.
     */
    data: XOR<WasteUpdateManyMutationInput, WasteUncheckedUpdateManyInput>
    /**
     * Filter which Wastes to update
     */
    where?: WasteWhereInput
  }


  /**
   * Waste upsert
   */
  export type WasteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * The filter to search for the Waste to update in case it exists.
     */
    where: WasteWhereUniqueInput
    /**
     * In case the Waste found by the `where` argument doesn't exist, create a new Waste with this data.
     */
    create: XOR<WasteCreateInput, WasteUncheckedCreateInput>
    /**
     * In case the Waste was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WasteUpdateInput, WasteUncheckedUpdateInput>
  }


  /**
   * Waste delete
   */
  export type WasteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
    /**
     * Filter which Waste to delete.
     */
    where: WasteWhereUniqueInput
  }


  /**
   * Waste deleteMany
   */
  export type WasteDeleteManyArgs = {
    /**
     * Filter which Wastes to delete
     */
    where?: WasteWhereInput
  }


  /**
   * Waste.entries
   */
  export type Waste$entriesArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    where?: EntryWhereInput
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    cursor?: EntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * Waste without action
   */
  export type WasteArgs = {
    /**
     * Select specific fields to fetch from the Waste
     */
    select?: WasteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WasteInclude | null
  }



  /**
   * Model Entry
   */


  export type AggregateEntry = {
    _count: EntryCountAggregateOutputType | null
    _avg: EntryAvgAggregateOutputType | null
    _sum: EntrySumAggregateOutputType | null
    _min: EntryMinAggregateOutputType | null
    _max: EntryMaxAggregateOutputType | null
  }

  export type EntryAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    waste_id: number | null
    site_id: number | null
    company_id: number | null
  }

  export type EntrySumAggregateOutputType = {
    id: number | null
    weight: number | null
    waste_id: number | null
    site_id: number | null
    company_id: number | null
  }

  export type EntryMinAggregateOutputType = {
    id: number | null
    collaborator: string | null
    created_at: Date | null
    updated_at: Date | null
    weight: number | null
    waste_id: number | null
    user_id: string | null
    site_id: number | null
    company_id: number | null
  }

  export type EntryMaxAggregateOutputType = {
    id: number | null
    collaborator: string | null
    created_at: Date | null
    updated_at: Date | null
    weight: number | null
    waste_id: number | null
    user_id: string | null
    site_id: number | null
    company_id: number | null
  }

  export type EntryCountAggregateOutputType = {
    id: number
    collaborator: number
    created_at: number
    updated_at: number
    weight: number
    waste_id: number
    user_id: number
    site_id: number
    company_id: number
    _all: number
  }


  export type EntryAvgAggregateInputType = {
    id?: true
    weight?: true
    waste_id?: true
    site_id?: true
    company_id?: true
  }

  export type EntrySumAggregateInputType = {
    id?: true
    weight?: true
    waste_id?: true
    site_id?: true
    company_id?: true
  }

  export type EntryMinAggregateInputType = {
    id?: true
    collaborator?: true
    created_at?: true
    updated_at?: true
    weight?: true
    waste_id?: true
    user_id?: true
    site_id?: true
    company_id?: true
  }

  export type EntryMaxAggregateInputType = {
    id?: true
    collaborator?: true
    created_at?: true
    updated_at?: true
    weight?: true
    waste_id?: true
    user_id?: true
    site_id?: true
    company_id?: true
  }

  export type EntryCountAggregateInputType = {
    id?: true
    collaborator?: true
    created_at?: true
    updated_at?: true
    weight?: true
    waste_id?: true
    user_id?: true
    site_id?: true
    company_id?: true
    _all?: true
  }

  export type EntryAggregateArgs = {
    /**
     * Filter which Entry to aggregate.
     */
    where?: EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entries to fetch.
     */
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entries
    **/
    _count?: true | EntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntryMaxAggregateInputType
  }

  export type GetEntryAggregateType<T extends EntryAggregateArgs> = {
        [P in keyof T & keyof AggregateEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntry[P]>
      : GetScalarType<T[P], AggregateEntry[P]>
  }




  export type EntryGroupByArgs = {
    where?: EntryWhereInput
    orderBy?: Enumerable<EntryOrderByWithAggregationInput>
    by: EntryScalarFieldEnum[]
    having?: EntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntryCountAggregateInputType | true
    _avg?: EntryAvgAggregateInputType
    _sum?: EntrySumAggregateInputType
    _min?: EntryMinAggregateInputType
    _max?: EntryMaxAggregateInputType
  }


  export type EntryGroupByOutputType = {
    id: number
    collaborator: string
    created_at: Date
    updated_at: Date
    weight: number
    waste_id: number
    user_id: string
    site_id: number
    company_id: number
    _count: EntryCountAggregateOutputType | null
    _avg: EntryAvgAggregateOutputType | null
    _sum: EntrySumAggregateOutputType | null
    _min: EntryMinAggregateOutputType | null
    _max: EntryMaxAggregateOutputType | null
  }

  type GetEntryGroupByPayload<T extends EntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntryGroupByOutputType[P]>
            : GetScalarType<T[P], EntryGroupByOutputType[P]>
        }
      >
    >


  export type EntrySelect = {
    id?: boolean
    collaborator?: boolean
    created_at?: boolean
    updated_at?: boolean
    weight?: boolean
    waste?: boolean | WasteArgs
    waste_id?: boolean
    user?: boolean | UserArgs
    user_id?: boolean
    site?: boolean | SiteArgs
    site_id?: boolean
    company?: boolean | CompanyArgs
    company_id?: boolean
  }


  export type EntryInclude = {
    waste?: boolean | WasteArgs
    user?: boolean | UserArgs
    site?: boolean | SiteArgs
    company?: boolean | CompanyArgs
  }

  export type EntryGetPayload<S extends boolean | null | undefined | EntryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Entry :
    S extends undefined ? never :
    S extends { include: any } & (EntryArgs | EntryFindManyArgs)
    ? Entry  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'waste' ? WasteGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'site' ? SiteGetPayload<S['include'][P]> :
        P extends 'company' ? CompanyGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EntryArgs | EntryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'waste' ? WasteGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'site' ? SiteGetPayload<S['select'][P]> :
        P extends 'company' ? CompanyGetPayload<S['select'][P]> :  P extends keyof Entry ? Entry[P] : never
  } 
      : Entry


  type EntryCountArgs = 
    Omit<EntryFindManyArgs, 'select' | 'include'> & {
      select?: EntryCountAggregateInputType | true
    }

  export interface EntryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Entry that matches the filter.
     * @param {EntryFindUniqueArgs} args - Arguments to find a Entry
     * @example
     * // Get one Entry
     * const entry = await prisma.entry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EntryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Entry'> extends True ? Prisma__EntryClient<EntryGetPayload<T>> : Prisma__EntryClient<EntryGetPayload<T> | null, null>

    /**
     * Find one Entry that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EntryFindUniqueOrThrowArgs} args - Arguments to find a Entry
     * @example
     * // Get one Entry
     * const entry = await prisma.entry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EntryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EntryFindUniqueOrThrowArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Find the first Entry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryFindFirstArgs} args - Arguments to find a Entry
     * @example
     * // Get one Entry
     * const entry = await prisma.entry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EntryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Entry'> extends True ? Prisma__EntryClient<EntryGetPayload<T>> : Prisma__EntryClient<EntryGetPayload<T> | null, null>

    /**
     * Find the first Entry that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryFindFirstOrThrowArgs} args - Arguments to find a Entry
     * @example
     * // Get one Entry
     * const entry = await prisma.entry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EntryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EntryFindFirstOrThrowArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Find zero or more Entries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entries
     * const entries = await prisma.entry.findMany()
     * 
     * // Get first 10 Entries
     * const entries = await prisma.entry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entryWithIdOnly = await prisma.entry.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EntryFindManyArgs>(
      args?: SelectSubset<T, EntryFindManyArgs>
    ): Prisma.PrismaPromise<Array<EntryGetPayload<T>>>

    /**
     * Create a Entry.
     * @param {EntryCreateArgs} args - Arguments to create a Entry.
     * @example
     * // Create one Entry
     * const Entry = await prisma.entry.create({
     *   data: {
     *     // ... data to create a Entry
     *   }
     * })
     * 
    **/
    create<T extends EntryCreateArgs>(
      args: SelectSubset<T, EntryCreateArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Create many Entries.
     *     @param {EntryCreateManyArgs} args - Arguments to create many Entries.
     *     @example
     *     // Create many Entries
     *     const entry = await prisma.entry.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EntryCreateManyArgs>(
      args?: SelectSubset<T, EntryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entry.
     * @param {EntryDeleteArgs} args - Arguments to delete one Entry.
     * @example
     * // Delete one Entry
     * const Entry = await prisma.entry.delete({
     *   where: {
     *     // ... filter to delete one Entry
     *   }
     * })
     * 
    **/
    delete<T extends EntryDeleteArgs>(
      args: SelectSubset<T, EntryDeleteArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Update one Entry.
     * @param {EntryUpdateArgs} args - Arguments to update one Entry.
     * @example
     * // Update one Entry
     * const entry = await prisma.entry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntryUpdateArgs>(
      args: SelectSubset<T, EntryUpdateArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Delete zero or more Entries.
     * @param {EntryDeleteManyArgs} args - Arguments to filter Entries to delete.
     * @example
     * // Delete a few Entries
     * const { count } = await prisma.entry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntryDeleteManyArgs>(
      args?: SelectSubset<T, EntryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entries
     * const entry = await prisma.entry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntryUpdateManyArgs>(
      args: SelectSubset<T, EntryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entry.
     * @param {EntryUpsertArgs} args - Arguments to update or create a Entry.
     * @example
     * // Update or create a Entry
     * const entry = await prisma.entry.upsert({
     *   create: {
     *     // ... data to create a Entry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entry we want to update
     *   }
     * })
    **/
    upsert<T extends EntryUpsertArgs>(
      args: SelectSubset<T, EntryUpsertArgs>
    ): Prisma__EntryClient<EntryGetPayload<T>>

    /**
     * Count the number of Entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryCountArgs} args - Arguments to filter Entries to count.
     * @example
     * // Count the number of Entries
     * const count = await prisma.entry.count({
     *   where: {
     *     // ... the filter for the Entries we want to count
     *   }
     * })
    **/
    count<T extends EntryCountArgs>(
      args?: Subset<T, EntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntryAggregateArgs>(args: Subset<T, EntryAggregateArgs>): Prisma.PrismaPromise<GetEntryAggregateType<T>>

    /**
     * Group by Entry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntryGroupByArgs['orderBy'] }
        : { orderBy?: EntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Entry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EntryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    waste<T extends WasteArgs= {}>(args?: Subset<T, WasteArgs>): Prisma__WasteClient<WasteGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    site<T extends SiteArgs= {}>(args?: Subset<T, SiteArgs>): Prisma__SiteClient<SiteGetPayload<T> | Null>;

    company<T extends CompanyArgs= {}>(args?: Subset<T, CompanyArgs>): Prisma__CompanyClient<CompanyGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Entry base type for findUnique actions
   */
  export type EntryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter, which Entry to fetch.
     */
    where: EntryWhereUniqueInput
  }

  /**
   * Entry findUnique
   */
  export interface EntryFindUniqueArgs extends EntryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Entry findUniqueOrThrow
   */
  export type EntryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter, which Entry to fetch.
     */
    where: EntryWhereUniqueInput
  }


  /**
   * Entry base type for findFirst actions
   */
  export type EntryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter, which Entry to fetch.
     */
    where?: EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entries to fetch.
     */
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entries.
     */
    cursor?: EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entries.
     */
    distinct?: Enumerable<EntryScalarFieldEnum>
  }

  /**
   * Entry findFirst
   */
  export interface EntryFindFirstArgs extends EntryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Entry findFirstOrThrow
   */
  export type EntryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter, which Entry to fetch.
     */
    where?: EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entries to fetch.
     */
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entries.
     */
    cursor?: EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entries.
     */
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * Entry findMany
   */
  export type EntryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter, which Entries to fetch.
     */
    where?: EntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entries to fetch.
     */
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entries.
     */
    cursor?: EntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entries.
     */
    skip?: number
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * Entry create
   */
  export type EntryCreateArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * The data needed to create a Entry.
     */
    data: XOR<EntryCreateInput, EntryUncheckedCreateInput>
  }


  /**
   * Entry createMany
   */
  export type EntryCreateManyArgs = {
    /**
     * The data used to create many Entries.
     */
    data: Enumerable<EntryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Entry update
   */
  export type EntryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * The data needed to update a Entry.
     */
    data: XOR<EntryUpdateInput, EntryUncheckedUpdateInput>
    /**
     * Choose, which Entry to update.
     */
    where: EntryWhereUniqueInput
  }


  /**
   * Entry updateMany
   */
  export type EntryUpdateManyArgs = {
    /**
     * The data used to update Entries.
     */
    data: XOR<EntryUpdateManyMutationInput, EntryUncheckedUpdateManyInput>
    /**
     * Filter which Entries to update
     */
    where?: EntryWhereInput
  }


  /**
   * Entry upsert
   */
  export type EntryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * The filter to search for the Entry to update in case it exists.
     */
    where: EntryWhereUniqueInput
    /**
     * In case the Entry found by the `where` argument doesn't exist, create a new Entry with this data.
     */
    create: XOR<EntryCreateInput, EntryUncheckedCreateInput>
    /**
     * In case the Entry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntryUpdateInput, EntryUncheckedUpdateInput>
  }


  /**
   * Entry delete
   */
  export type EntryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    /**
     * Filter which Entry to delete.
     */
    where: EntryWhereUniqueInput
  }


  /**
   * Entry deleteMany
   */
  export type EntryDeleteManyArgs = {
    /**
     * Filter which Entries to delete
     */
    where?: EntryWhereInput
  }


  /**
   * Entry without action
   */
  export type EntryArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
  }



  /**
   * Model Company
   */


  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
    city_id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
    city_id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    company: string | null
    admin_code: string | null
    user_code: string | null
    address_line_1: string | null
    address_line_2: string | null
    email: string | null
    phone: string | null
    city_id: number | null
    zip_code: string | null
    company_type: CompanyType | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    company: string | null
    admin_code: string | null
    user_code: string | null
    address_line_1: string | null
    address_line_2: string | null
    email: string | null
    phone: string | null
    city_id: number | null
    zip_code: string | null
    company_type: CompanyType | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    company: number
    admin_code: number
    user_code: number
    address_line_1: number
    address_line_2: number
    email: number
    phone: number
    city_id: number
    zip_code: number
    company_type: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    city_id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    city_id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    company?: true
    admin_code?: true
    user_code?: true
    address_line_1?: true
    address_line_2?: true
    email?: true
    phone?: true
    city_id?: true
    zip_code?: true
    company_type?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    company?: true
    admin_code?: true
    user_code?: true
    address_line_1?: true
    address_line_2?: true
    email?: true
    phone?: true
    city_id?: true
    zip_code?: true
    company_type?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    company?: true
    admin_code?: true
    user_code?: true
    address_line_1?: true
    address_line_2?: true
    email?: true
    phone?: true
    city_id?: true
    zip_code?: true
    company_type?: true
    _all?: true
  }

  export type CompanyAggregateArgs = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs = {
    where?: CompanyWhereInput
    orderBy?: Enumerable<CompanyOrderByWithAggregationInput>
    by: CompanyScalarFieldEnum[]
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }


  export type CompanyGroupByOutputType = {
    id: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect = {
    id?: boolean
    company?: boolean
    admin_code?: boolean
    user_code?: boolean
    address_line_1?: boolean
    address_line_2?: boolean
    email?: boolean
    phone?: boolean
    city?: boolean | CityArgs
    city_id?: boolean
    zip_code?: boolean
    company_type?: boolean
    users?: boolean | Company$usersArgs
    source_company?: boolean | Company$source_companyArgs
    collector_company?: boolean | Company$collector_companyArgs
    entries?: boolean | Company$entriesArgs
    _count?: boolean | CompanyCountOutputTypeArgs
  }


  export type CompanyInclude = {
    city?: boolean | CityArgs
    users?: boolean | Company$usersArgs
    source_company?: boolean | Company$source_companyArgs
    collector_company?: boolean | Company$collector_companyArgs
    entries?: boolean | Company$entriesArgs
    _count?: boolean | CompanyCountOutputTypeArgs
  }

  export type CompanyGetPayload<S extends boolean | null | undefined | CompanyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Company :
    S extends undefined ? never :
    S extends { include: any } & (CompanyArgs | CompanyFindManyArgs)
    ? Company  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'city' ? CityGetPayload<S['include'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'source_company' ? Array < CompanyCollaborationGetPayload<S['include'][P]>>  :
        P extends 'collector_company' ? Array < CompanyCollaborationGetPayload<S['include'][P]>>  :
        P extends 'entries' ? Array < EntryGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompanyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompanyArgs | CompanyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'city' ? CityGetPayload<S['select'][P]> :
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'source_company' ? Array < CompanyCollaborationGetPayload<S['select'][P]>>  :
        P extends 'collector_company' ? Array < CompanyCollaborationGetPayload<S['select'][P]>>  :
        P extends 'entries' ? Array < EntryGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompanyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Company ? Company[P] : never
  } 
      : Company


  type CompanyCountArgs = 
    Omit<CompanyFindManyArgs, 'select' | 'include'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompanyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Company'> extends True ? Prisma__CompanyClient<CompanyGetPayload<T>> : Prisma__CompanyClient<CompanyGetPayload<T> | null, null>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompanyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Company'> extends True ? Prisma__CompanyClient<CompanyGetPayload<T>> : Prisma__CompanyClient<CompanyGetPayload<T> | null, null>

    /**
     * Find the first Company that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs>(
      args?: SelectSubset<T, CompanyFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompanyGetPayload<T>>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs>(
      args: SelectSubset<T, CompanyCreateArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs>(
      args?: SelectSubset<T, CompanyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs>(
      args: SelectSubset<T, CompanyDeleteArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs>(
      args: SelectSubset<T, CompanyUpdateArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs>(
      args?: SelectSubset<T, CompanyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs>(
      args: SelectSubset<T, CompanyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs>(
      args: SelectSubset<T, CompanyUpsertArgs>
    ): Prisma__CompanyClient<CompanyGetPayload<T>>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    city<T extends CityArgs= {}>(args?: Subset<T, CityArgs>): Prisma__CityClient<CityGetPayload<T> | Null>;

    users<T extends Company$usersArgs= {}>(args?: Subset<T, Company$usersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    source_company<T extends Company$source_companyArgs= {}>(args?: Subset<T, Company$source_companyArgs>): Prisma.PrismaPromise<Array<CompanyCollaborationGetPayload<T>>| Null>;

    collector_company<T extends Company$collector_companyArgs= {}>(args?: Subset<T, Company$collector_companyArgs>): Prisma.PrismaPromise<Array<CompanyCollaborationGetPayload<T>>| Null>;

    entries<T extends Company$entriesArgs= {}>(args?: Subset<T, Company$entriesArgs>): Prisma.PrismaPromise<Array<EntryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Company base type for findUnique actions
   */
  export type CompanyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUnique
   */
  export interface CompanyFindUniqueArgs extends CompanyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company base type for findFirst actions
   */
  export type CompanyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }

  /**
   * Company findFirst
   */
  export interface CompanyFindFirstArgs extends CompanyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs = {
    /**
     * The data used to create many Companies.
     */
    data: Enumerable<CompanyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.users
   */
  export type Company$usersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * Company.source_company
   */
  export type Company$source_companyArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    where?: CompanyCollaborationWhereInput
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    cursor?: CompanyCollaborationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyCollaborationScalarFieldEnum>
  }


  /**
   * Company.collector_company
   */
  export type Company$collector_companyArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    where?: CompanyCollaborationWhereInput
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    cursor?: CompanyCollaborationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyCollaborationScalarFieldEnum>
  }


  /**
   * Company.entries
   */
  export type Company$entriesArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    where?: EntryWhereInput
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    cursor?: EntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * Company without action
   */
  export type CompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
  }



  /**
   * Model CompanyCollaboration
   */


  export type AggregateCompanyCollaboration = {
    _count: CompanyCollaborationCountAggregateOutputType | null
    _avg: CompanyCollaborationAvgAggregateOutputType | null
    _sum: CompanyCollaborationSumAggregateOutputType | null
    _min: CompanyCollaborationMinAggregateOutputType | null
    _max: CompanyCollaborationMaxAggregateOutputType | null
  }

  export type CompanyCollaborationAvgAggregateOutputType = {
    id: number | null
    source_id: number | null
    collaborator_id: number | null
  }

  export type CompanyCollaborationSumAggregateOutputType = {
    id: number | null
    source_id: number | null
    collaborator_id: number | null
  }

  export type CompanyCollaborationMinAggregateOutputType = {
    id: number | null
    source_id: number | null
    collaborator_id: number | null
  }

  export type CompanyCollaborationMaxAggregateOutputType = {
    id: number | null
    source_id: number | null
    collaborator_id: number | null
  }

  export type CompanyCollaborationCountAggregateOutputType = {
    id: number
    source_id: number
    collaborator_id: number
    _all: number
  }


  export type CompanyCollaborationAvgAggregateInputType = {
    id?: true
    source_id?: true
    collaborator_id?: true
  }

  export type CompanyCollaborationSumAggregateInputType = {
    id?: true
    source_id?: true
    collaborator_id?: true
  }

  export type CompanyCollaborationMinAggregateInputType = {
    id?: true
    source_id?: true
    collaborator_id?: true
  }

  export type CompanyCollaborationMaxAggregateInputType = {
    id?: true
    source_id?: true
    collaborator_id?: true
  }

  export type CompanyCollaborationCountAggregateInputType = {
    id?: true
    source_id?: true
    collaborator_id?: true
    _all?: true
  }

  export type CompanyCollaborationAggregateArgs = {
    /**
     * Filter which CompanyCollaboration to aggregate.
     */
    where?: CompanyCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyCollaborations to fetch.
     */
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyCollaborations
    **/
    _count?: true | CompanyCollaborationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyCollaborationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyCollaborationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyCollaborationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyCollaborationMaxAggregateInputType
  }

  export type GetCompanyCollaborationAggregateType<T extends CompanyCollaborationAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyCollaboration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyCollaboration[P]>
      : GetScalarType<T[P], AggregateCompanyCollaboration[P]>
  }




  export type CompanyCollaborationGroupByArgs = {
    where?: CompanyCollaborationWhereInput
    orderBy?: Enumerable<CompanyCollaborationOrderByWithAggregationInput>
    by: CompanyCollaborationScalarFieldEnum[]
    having?: CompanyCollaborationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCollaborationCountAggregateInputType | true
    _avg?: CompanyCollaborationAvgAggregateInputType
    _sum?: CompanyCollaborationSumAggregateInputType
    _min?: CompanyCollaborationMinAggregateInputType
    _max?: CompanyCollaborationMaxAggregateInputType
  }


  export type CompanyCollaborationGroupByOutputType = {
    id: number
    source_id: number
    collaborator_id: number
    _count: CompanyCollaborationCountAggregateOutputType | null
    _avg: CompanyCollaborationAvgAggregateOutputType | null
    _sum: CompanyCollaborationSumAggregateOutputType | null
    _min: CompanyCollaborationMinAggregateOutputType | null
    _max: CompanyCollaborationMaxAggregateOutputType | null
  }

  type GetCompanyCollaborationGroupByPayload<T extends CompanyCollaborationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompanyCollaborationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyCollaborationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyCollaborationGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyCollaborationGroupByOutputType[P]>
        }
      >
    >


  export type CompanyCollaborationSelect = {
    id?: boolean
    company?: boolean | CompanyArgs
    source_id?: boolean
    collaborator?: boolean | CompanyArgs
    collaborator_id?: boolean
  }


  export type CompanyCollaborationInclude = {
    company?: boolean | CompanyArgs
    collaborator?: boolean | CompanyArgs
  }

  export type CompanyCollaborationGetPayload<S extends boolean | null | undefined | CompanyCollaborationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompanyCollaboration :
    S extends undefined ? never :
    S extends { include: any } & (CompanyCollaborationArgs | CompanyCollaborationFindManyArgs)
    ? CompanyCollaboration  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'company' ? CompanyGetPayload<S['include'][P]> :
        P extends 'collaborator' ? CompanyGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompanyCollaborationArgs | CompanyCollaborationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'company' ? CompanyGetPayload<S['select'][P]> :
        P extends 'collaborator' ? CompanyGetPayload<S['select'][P]> :  P extends keyof CompanyCollaboration ? CompanyCollaboration[P] : never
  } 
      : CompanyCollaboration


  type CompanyCollaborationCountArgs = 
    Omit<CompanyCollaborationFindManyArgs, 'select' | 'include'> & {
      select?: CompanyCollaborationCountAggregateInputType | true
    }

  export interface CompanyCollaborationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CompanyCollaboration that matches the filter.
     * @param {CompanyCollaborationFindUniqueArgs} args - Arguments to find a CompanyCollaboration
     * @example
     * // Get one CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyCollaborationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompanyCollaborationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CompanyCollaboration'> extends True ? Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>> : Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T> | null, null>

    /**
     * Find one CompanyCollaboration that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyCollaborationFindUniqueOrThrowArgs} args - Arguments to find a CompanyCollaboration
     * @example
     * // Get one CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyCollaborationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompanyCollaborationFindUniqueOrThrowArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Find the first CompanyCollaboration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationFindFirstArgs} args - Arguments to find a CompanyCollaboration
     * @example
     * // Get one CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyCollaborationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompanyCollaborationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CompanyCollaboration'> extends True ? Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>> : Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T> | null, null>

    /**
     * Find the first CompanyCollaboration that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationFindFirstOrThrowArgs} args - Arguments to find a CompanyCollaboration
     * @example
     * // Get one CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyCollaborationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompanyCollaborationFindFirstOrThrowArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Find zero or more CompanyCollaborations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyCollaborations
     * const companyCollaborations = await prisma.companyCollaboration.findMany()
     * 
     * // Get first 10 CompanyCollaborations
     * const companyCollaborations = await prisma.companyCollaboration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyCollaborationWithIdOnly = await prisma.companyCollaboration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyCollaborationFindManyArgs>(
      args?: SelectSubset<T, CompanyCollaborationFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompanyCollaborationGetPayload<T>>>

    /**
     * Create a CompanyCollaboration.
     * @param {CompanyCollaborationCreateArgs} args - Arguments to create a CompanyCollaboration.
     * @example
     * // Create one CompanyCollaboration
     * const CompanyCollaboration = await prisma.companyCollaboration.create({
     *   data: {
     *     // ... data to create a CompanyCollaboration
     *   }
     * })
     * 
    **/
    create<T extends CompanyCollaborationCreateArgs>(
      args: SelectSubset<T, CompanyCollaborationCreateArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Create many CompanyCollaborations.
     *     @param {CompanyCollaborationCreateManyArgs} args - Arguments to create many CompanyCollaborations.
     *     @example
     *     // Create many CompanyCollaborations
     *     const companyCollaboration = await prisma.companyCollaboration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCollaborationCreateManyArgs>(
      args?: SelectSubset<T, CompanyCollaborationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CompanyCollaboration.
     * @param {CompanyCollaborationDeleteArgs} args - Arguments to delete one CompanyCollaboration.
     * @example
     * // Delete one CompanyCollaboration
     * const CompanyCollaboration = await prisma.companyCollaboration.delete({
     *   where: {
     *     // ... filter to delete one CompanyCollaboration
     *   }
     * })
     * 
    **/
    delete<T extends CompanyCollaborationDeleteArgs>(
      args: SelectSubset<T, CompanyCollaborationDeleteArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Update one CompanyCollaboration.
     * @param {CompanyCollaborationUpdateArgs} args - Arguments to update one CompanyCollaboration.
     * @example
     * // Update one CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyCollaborationUpdateArgs>(
      args: SelectSubset<T, CompanyCollaborationUpdateArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Delete zero or more CompanyCollaborations.
     * @param {CompanyCollaborationDeleteManyArgs} args - Arguments to filter CompanyCollaborations to delete.
     * @example
     * // Delete a few CompanyCollaborations
     * const { count } = await prisma.companyCollaboration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyCollaborationDeleteManyArgs>(
      args?: SelectSubset<T, CompanyCollaborationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyCollaborations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyCollaborations
     * const companyCollaboration = await prisma.companyCollaboration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyCollaborationUpdateManyArgs>(
      args: SelectSubset<T, CompanyCollaborationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyCollaboration.
     * @param {CompanyCollaborationUpsertArgs} args - Arguments to update or create a CompanyCollaboration.
     * @example
     * // Update or create a CompanyCollaboration
     * const companyCollaboration = await prisma.companyCollaboration.upsert({
     *   create: {
     *     // ... data to create a CompanyCollaboration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyCollaboration we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyCollaborationUpsertArgs>(
      args: SelectSubset<T, CompanyCollaborationUpsertArgs>
    ): Prisma__CompanyCollaborationClient<CompanyCollaborationGetPayload<T>>

    /**
     * Count the number of CompanyCollaborations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationCountArgs} args - Arguments to filter CompanyCollaborations to count.
     * @example
     * // Count the number of CompanyCollaborations
     * const count = await prisma.companyCollaboration.count({
     *   where: {
     *     // ... the filter for the CompanyCollaborations we want to count
     *   }
     * })
    **/
    count<T extends CompanyCollaborationCountArgs>(
      args?: Subset<T, CompanyCollaborationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCollaborationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyCollaboration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyCollaborationAggregateArgs>(args: Subset<T, CompanyCollaborationAggregateArgs>): Prisma.PrismaPromise<GetCompanyCollaborationAggregateType<T>>

    /**
     * Group by CompanyCollaboration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCollaborationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyCollaborationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyCollaborationGroupByArgs['orderBy'] }
        : { orderBy?: CompanyCollaborationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyCollaborationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyCollaborationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyCollaboration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyCollaborationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    company<T extends CompanyArgs= {}>(args?: Subset<T, CompanyArgs>): Prisma__CompanyClient<CompanyGetPayload<T> | Null>;

    collaborator<T extends CompanyArgs= {}>(args?: Subset<T, CompanyArgs>): Prisma__CompanyClient<CompanyGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CompanyCollaboration base type for findUnique actions
   */
  export type CompanyCollaborationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter, which CompanyCollaboration to fetch.
     */
    where: CompanyCollaborationWhereUniqueInput
  }

  /**
   * CompanyCollaboration findUnique
   */
  export interface CompanyCollaborationFindUniqueArgs extends CompanyCollaborationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompanyCollaboration findUniqueOrThrow
   */
  export type CompanyCollaborationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter, which CompanyCollaboration to fetch.
     */
    where: CompanyCollaborationWhereUniqueInput
  }


  /**
   * CompanyCollaboration base type for findFirst actions
   */
  export type CompanyCollaborationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter, which CompanyCollaboration to fetch.
     */
    where?: CompanyCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyCollaborations to fetch.
     */
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyCollaborations.
     */
    cursor?: CompanyCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyCollaborations.
     */
    distinct?: Enumerable<CompanyCollaborationScalarFieldEnum>
  }

  /**
   * CompanyCollaboration findFirst
   */
  export interface CompanyCollaborationFindFirstArgs extends CompanyCollaborationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CompanyCollaboration findFirstOrThrow
   */
  export type CompanyCollaborationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter, which CompanyCollaboration to fetch.
     */
    where?: CompanyCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyCollaborations to fetch.
     */
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyCollaborations.
     */
    cursor?: CompanyCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyCollaborations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyCollaborations.
     */
    distinct?: Enumerable<CompanyCollaborationScalarFieldEnum>
  }


  /**
   * CompanyCollaboration findMany
   */
  export type CompanyCollaborationFindManyArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter, which CompanyCollaborations to fetch.
     */
    where?: CompanyCollaborationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyCollaborations to fetch.
     */
    orderBy?: Enumerable<CompanyCollaborationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyCollaborations.
     */
    cursor?: CompanyCollaborationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyCollaborations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyCollaborations.
     */
    skip?: number
    distinct?: Enumerable<CompanyCollaborationScalarFieldEnum>
  }


  /**
   * CompanyCollaboration create
   */
  export type CompanyCollaborationCreateArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * The data needed to create a CompanyCollaboration.
     */
    data: XOR<CompanyCollaborationCreateInput, CompanyCollaborationUncheckedCreateInput>
  }


  /**
   * CompanyCollaboration createMany
   */
  export type CompanyCollaborationCreateManyArgs = {
    /**
     * The data used to create many CompanyCollaborations.
     */
    data: Enumerable<CompanyCollaborationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CompanyCollaboration update
   */
  export type CompanyCollaborationUpdateArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * The data needed to update a CompanyCollaboration.
     */
    data: XOR<CompanyCollaborationUpdateInput, CompanyCollaborationUncheckedUpdateInput>
    /**
     * Choose, which CompanyCollaboration to update.
     */
    where: CompanyCollaborationWhereUniqueInput
  }


  /**
   * CompanyCollaboration updateMany
   */
  export type CompanyCollaborationUpdateManyArgs = {
    /**
     * The data used to update CompanyCollaborations.
     */
    data: XOR<CompanyCollaborationUpdateManyMutationInput, CompanyCollaborationUncheckedUpdateManyInput>
    /**
     * Filter which CompanyCollaborations to update
     */
    where?: CompanyCollaborationWhereInput
  }


  /**
   * CompanyCollaboration upsert
   */
  export type CompanyCollaborationUpsertArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * The filter to search for the CompanyCollaboration to update in case it exists.
     */
    where: CompanyCollaborationWhereUniqueInput
    /**
     * In case the CompanyCollaboration found by the `where` argument doesn't exist, create a new CompanyCollaboration with this data.
     */
    create: XOR<CompanyCollaborationCreateInput, CompanyCollaborationUncheckedCreateInput>
    /**
     * In case the CompanyCollaboration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyCollaborationUpdateInput, CompanyCollaborationUncheckedUpdateInput>
  }


  /**
   * CompanyCollaboration delete
   */
  export type CompanyCollaborationDeleteArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
    /**
     * Filter which CompanyCollaboration to delete.
     */
    where: CompanyCollaborationWhereUniqueInput
  }


  /**
   * CompanyCollaboration deleteMany
   */
  export type CompanyCollaborationDeleteManyArgs = {
    /**
     * Filter which CompanyCollaborations to delete
     */
    where?: CompanyCollaborationWhereInput
  }


  /**
   * CompanyCollaboration without action
   */
  export type CompanyCollaborationArgs = {
    /**
     * Select specific fields to fetch from the CompanyCollaboration
     */
    select?: CompanyCollaborationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyCollaborationInclude | null
  }



  /**
   * Model Site
   */


  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    site: string | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    site: string | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    site: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    site?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    site?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    site?: true
    _all?: true
  }

  export type SiteAggregateArgs = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs = {
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithAggregationInput>
    by: SiteScalarFieldEnum[]
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }


  export type SiteGroupByOutputType = {
    id: number
    site: string
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect = {
    id?: boolean
    site?: boolean
    entries?: boolean | Site$entriesArgs
    _count?: boolean | SiteCountOutputTypeArgs
  }


  export type SiteInclude = {
    entries?: boolean | Site$entriesArgs
    _count?: boolean | SiteCountOutputTypeArgs
  }

  export type SiteGetPayload<S extends boolean | null | undefined | SiteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Site :
    S extends undefined ? never :
    S extends { include: any } & (SiteArgs | SiteFindManyArgs)
    ? Site  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'entries' ? Array < EntryGetPayload<S['include'][P]>>  :
        P extends '_count' ? SiteCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SiteArgs | SiteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'entries' ? Array < EntryGetPayload<S['select'][P]>>  :
        P extends '_count' ? SiteCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Site ? Site[P] : never
  } 
      : Site


  type SiteCountArgs = 
    Omit<SiteFindManyArgs, 'select' | 'include'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find one Site that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SiteFindUniqueOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find the first Site that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SiteFindFirstOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteFindManyArgs>(
      args?: SelectSubset<T, SiteFindManyArgs>
    ): Prisma.PrismaPromise<Array<SiteGetPayload<T>>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
    **/
    create<T extends SiteCreateArgs>(
      args: SelectSubset<T, SiteCreateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Create many Sites.
     *     @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     *     @example
     *     // Create many Sites
     *     const site = await prisma.site.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteCreateManyArgs>(
      args?: SelectSubset<T, SiteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
    **/
    delete<T extends SiteDeleteArgs>(
      args: SelectSubset<T, SiteDeleteArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteUpdateArgs>(
      args: SelectSubset<T, SiteUpdateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteDeleteManyArgs>(
      args?: SelectSubset<T, SiteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteUpdateManyArgs>(
      args: SelectSubset<T, SiteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
    **/
    upsert<T extends SiteUpsertArgs>(
      args: SelectSubset<T, SiteUpsertArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    entries<T extends Site$entriesArgs= {}>(args?: Subset<T, Site$entriesArgs>): Prisma.PrismaPromise<Array<EntryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Site base type for findUnique actions
   */
  export type SiteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUnique
   */
  export interface SiteFindUniqueArgs extends SiteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site base type for findFirst actions
   */
  export type SiteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }

  /**
   * Site findFirst
   */
  export interface SiteFindFirstArgs extends SiteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site findMany
   */
  export type SiteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site create
   */
  export type SiteCreateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }


  /**
   * Site createMany
   */
  export type SiteCreateManyArgs = {
    /**
     * The data used to create many Sites.
     */
    data: Enumerable<SiteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Site update
   */
  export type SiteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }


  /**
   * Site upsert
   */
  export type SiteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }


  /**
   * Site delete
   */
  export type SiteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }


  /**
   * Site.entries
   */
  export type Site$entriesArgs = {
    /**
     * Select specific fields to fetch from the Entry
     */
    select?: EntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EntryInclude | null
    where?: EntryWhereInput
    orderBy?: Enumerable<EntryOrderByWithRelationInput>
    cursor?: EntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EntryScalarFieldEnum>
  }


  /**
   * Site without action
   */
  export type SiteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
  }



  /**
   * Model City
   */


  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityAvgAggregateOutputType = {
    id: number | null
    province_id: number | null
  }

  export type CitySumAggregateOutputType = {
    id: number | null
    province_id: number | null
  }

  export type CityMinAggregateOutputType = {
    id: number | null
    city: string | null
    province_id: number | null
  }

  export type CityMaxAggregateOutputType = {
    id: number | null
    city: string | null
    province_id: number | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    city: number
    province_id: number
    _all: number
  }


  export type CityAvgAggregateInputType = {
    id?: true
    province_id?: true
  }

  export type CitySumAggregateInputType = {
    id?: true
    province_id?: true
  }

  export type CityMinAggregateInputType = {
    id?: true
    city?: true
    province_id?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    city?: true
    province_id?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    city?: true
    province_id?: true
    _all?: true
  }

  export type CityAggregateArgs = {
    /**
     * Filter which City to aggregate.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs = {
    where?: CityWhereInput
    orderBy?: Enumerable<CityOrderByWithAggregationInput>
    by: CityScalarFieldEnum[]
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _avg?: CityAvgAggregateInputType
    _sum?: CitySumAggregateInputType
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }


  export type CityGroupByOutputType = {
    id: number
    city: string
    province_id: number
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect = {
    id?: boolean
    city?: boolean
    province?: boolean | ProvinceArgs
    province_id?: boolean
    Companies?: boolean | City$CompaniesArgs
    _count?: boolean | CityCountOutputTypeArgs
  }


  export type CityInclude = {
    province?: boolean | ProvinceArgs
    Companies?: boolean | City$CompaniesArgs
    _count?: boolean | CityCountOutputTypeArgs
  }

  export type CityGetPayload<S extends boolean | null | undefined | CityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? City :
    S extends undefined ? never :
    S extends { include: any } & (CityArgs | CityFindManyArgs)
    ? City  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'province' ? ProvinceGetPayload<S['include'][P]> :
        P extends 'Companies' ? Array < CompanyGetPayload<S['include'][P]>>  :
        P extends '_count' ? CityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CityArgs | CityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'province' ? ProvinceGetPayload<S['select'][P]> :
        P extends 'Companies' ? Array < CompanyGetPayload<S['select'][P]>>  :
        P extends '_count' ? CityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof City ? City[P] : never
  } 
      : City


  type CityCountArgs = 
    Omit<CityFindManyArgs, 'select' | 'include'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface CityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'City'> extends True ? Prisma__CityClient<CityGetPayload<T>> : Prisma__CityClient<CityGetPayload<T> | null, null>

    /**
     * Find one City that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CityFindUniqueOrThrowArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'City'> extends True ? Prisma__CityClient<CityGetPayload<T>> : Prisma__CityClient<CityGetPayload<T> | null, null>

    /**
     * Find the first City that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CityFindFirstOrThrowArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CityFindManyArgs>(
      args?: SelectSubset<T, CityFindManyArgs>
    ): Prisma.PrismaPromise<Array<CityGetPayload<T>>>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
    **/
    create<T extends CityCreateArgs>(
      args: SelectSubset<T, CityCreateArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Create many Cities.
     *     @param {CityCreateManyArgs} args - Arguments to create many Cities.
     *     @example
     *     // Create many Cities
     *     const city = await prisma.city.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CityCreateManyArgs>(
      args?: SelectSubset<T, CityCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
    **/
    delete<T extends CityDeleteArgs>(
      args: SelectSubset<T, CityDeleteArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CityUpdateArgs>(
      args: SelectSubset<T, CityUpdateArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CityDeleteManyArgs>(
      args?: SelectSubset<T, CityDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CityUpdateManyArgs>(
      args: SelectSubset<T, CityUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
    **/
    upsert<T extends CityUpsertArgs>(
      args: SelectSubset<T, CityUpsertArgs>
    ): Prisma__CityClient<CityGetPayload<T>>

    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CityClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    province<T extends ProvinceArgs= {}>(args?: Subset<T, ProvinceArgs>): Prisma__ProvinceClient<ProvinceGetPayload<T> | Null>;

    Companies<T extends City$CompaniesArgs= {}>(args?: Subset<T, City$CompaniesArgs>): Prisma.PrismaPromise<Array<CompanyGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * City base type for findUnique actions
   */
  export type CityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findUnique
   */
  export interface CityFindUniqueArgs extends CityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * City findUniqueOrThrow
   */
  export type CityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }


  /**
   * City base type for findFirst actions
   */
  export type CityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: Enumerable<CityScalarFieldEnum>
  }

  /**
   * City findFirst
   */
  export interface CityFindFirstArgs extends CityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * City findFirstOrThrow
   */
  export type CityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: Enumerable<CityScalarFieldEnum>
  }


  /**
   * City findMany
   */
  export type CityFindManyArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter, which Cities to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    distinct?: Enumerable<CityScalarFieldEnum>
  }


  /**
   * City create
   */
  export type CityCreateArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * The data needed to create a City.
     */
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }


  /**
   * City createMany
   */
  export type CityCreateManyArgs = {
    /**
     * The data used to create many Cities.
     */
    data: Enumerable<CityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * City update
   */
  export type CityUpdateArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * The data needed to update a City.
     */
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     */
    where: CityWhereUniqueInput
  }


  /**
   * City updateMany
   */
  export type CityUpdateManyArgs = {
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
  }


  /**
   * City upsert
   */
  export type CityUpsertArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * The filter to search for the City to update in case it exists.
     */
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     */
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }


  /**
   * City delete
   */
  export type CityDeleteArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    /**
     * Filter which City to delete.
     */
    where: CityWhereUniqueInput
  }


  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs = {
    /**
     * Filter which Cities to delete
     */
    where?: CityWhereInput
  }


  /**
   * City.Companies
   */
  export type City$CompaniesArgs = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude | null
    where?: CompanyWhereInput
    orderBy?: Enumerable<CompanyOrderByWithRelationInput>
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * City without action
   */
  export type CityArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
  }



  /**
   * Model Province
   */


  export type AggregateProvince = {
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  export type ProvinceAvgAggregateOutputType = {
    id: number | null
  }

  export type ProvinceSumAggregateOutputType = {
    id: number | null
  }

  export type ProvinceMinAggregateOutputType = {
    id: number | null
    province: string | null
  }

  export type ProvinceMaxAggregateOutputType = {
    id: number | null
    province: string | null
  }

  export type ProvinceCountAggregateOutputType = {
    id: number
    province: number
    _all: number
  }


  export type ProvinceAvgAggregateInputType = {
    id?: true
  }

  export type ProvinceSumAggregateInputType = {
    id?: true
  }

  export type ProvinceMinAggregateInputType = {
    id?: true
    province?: true
  }

  export type ProvinceMaxAggregateInputType = {
    id?: true
    province?: true
  }

  export type ProvinceCountAggregateInputType = {
    id?: true
    province?: true
    _all?: true
  }

  export type ProvinceAggregateArgs = {
    /**
     * Filter which Province to aggregate.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: Enumerable<ProvinceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Provinces
    **/
    _count?: true | ProvinceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProvinceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProvinceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProvinceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProvinceMaxAggregateInputType
  }

  export type GetProvinceAggregateType<T extends ProvinceAggregateArgs> = {
        [P in keyof T & keyof AggregateProvince]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProvince[P]>
      : GetScalarType<T[P], AggregateProvince[P]>
  }




  export type ProvinceGroupByArgs = {
    where?: ProvinceWhereInput
    orderBy?: Enumerable<ProvinceOrderByWithAggregationInput>
    by: ProvinceScalarFieldEnum[]
    having?: ProvinceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProvinceCountAggregateInputType | true
    _avg?: ProvinceAvgAggregateInputType
    _sum?: ProvinceSumAggregateInputType
    _min?: ProvinceMinAggregateInputType
    _max?: ProvinceMaxAggregateInputType
  }


  export type ProvinceGroupByOutputType = {
    id: number
    province: string
    _count: ProvinceCountAggregateOutputType | null
    _avg: ProvinceAvgAggregateOutputType | null
    _sum: ProvinceSumAggregateOutputType | null
    _min: ProvinceMinAggregateOutputType | null
    _max: ProvinceMaxAggregateOutputType | null
  }

  type GetProvinceGroupByPayload<T extends ProvinceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProvinceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProvinceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
            : GetScalarType<T[P], ProvinceGroupByOutputType[P]>
        }
      >
    >


  export type ProvinceSelect = {
    id?: boolean
    province?: boolean
    cities?: boolean | Province$citiesArgs
    _count?: boolean | ProvinceCountOutputTypeArgs
  }


  export type ProvinceInclude = {
    cities?: boolean | Province$citiesArgs
    _count?: boolean | ProvinceCountOutputTypeArgs
  }

  export type ProvinceGetPayload<S extends boolean | null | undefined | ProvinceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Province :
    S extends undefined ? never :
    S extends { include: any } & (ProvinceArgs | ProvinceFindManyArgs)
    ? Province  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cities' ? Array < CityGetPayload<S['include'][P]>>  :
        P extends '_count' ? ProvinceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProvinceArgs | ProvinceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cities' ? Array < CityGetPayload<S['select'][P]>>  :
        P extends '_count' ? ProvinceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Province ? Province[P] : never
  } 
      : Province


  type ProvinceCountArgs = 
    Omit<ProvinceFindManyArgs, 'select' | 'include'> & {
      select?: ProvinceCountAggregateInputType | true
    }

  export interface ProvinceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Province that matches the filter.
     * @param {ProvinceFindUniqueArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProvinceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProvinceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Province'> extends True ? Prisma__ProvinceClient<ProvinceGetPayload<T>> : Prisma__ProvinceClient<ProvinceGetPayload<T> | null, null>

    /**
     * Find one Province that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProvinceFindUniqueOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProvinceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProvinceFindUniqueOrThrowArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Find the first Province that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindFirstArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProvinceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProvinceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Province'> extends True ? Prisma__ProvinceClient<ProvinceGetPayload<T>> : Prisma__ProvinceClient<ProvinceGetPayload<T> | null, null>

    /**
     * Find the first Province that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindFirstOrThrowArgs} args - Arguments to find a Province
     * @example
     * // Get one Province
     * const province = await prisma.province.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProvinceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProvinceFindFirstOrThrowArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Find zero or more Provinces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Provinces
     * const provinces = await prisma.province.findMany()
     * 
     * // Get first 10 Provinces
     * const provinces = await prisma.province.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const provinceWithIdOnly = await prisma.province.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProvinceFindManyArgs>(
      args?: SelectSubset<T, ProvinceFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProvinceGetPayload<T>>>

    /**
     * Create a Province.
     * @param {ProvinceCreateArgs} args - Arguments to create a Province.
     * @example
     * // Create one Province
     * const Province = await prisma.province.create({
     *   data: {
     *     // ... data to create a Province
     *   }
     * })
     * 
    **/
    create<T extends ProvinceCreateArgs>(
      args: SelectSubset<T, ProvinceCreateArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Create many Provinces.
     *     @param {ProvinceCreateManyArgs} args - Arguments to create many Provinces.
     *     @example
     *     // Create many Provinces
     *     const province = await prisma.province.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProvinceCreateManyArgs>(
      args?: SelectSubset<T, ProvinceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Province.
     * @param {ProvinceDeleteArgs} args - Arguments to delete one Province.
     * @example
     * // Delete one Province
     * const Province = await prisma.province.delete({
     *   where: {
     *     // ... filter to delete one Province
     *   }
     * })
     * 
    **/
    delete<T extends ProvinceDeleteArgs>(
      args: SelectSubset<T, ProvinceDeleteArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Update one Province.
     * @param {ProvinceUpdateArgs} args - Arguments to update one Province.
     * @example
     * // Update one Province
     * const province = await prisma.province.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProvinceUpdateArgs>(
      args: SelectSubset<T, ProvinceUpdateArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Delete zero or more Provinces.
     * @param {ProvinceDeleteManyArgs} args - Arguments to filter Provinces to delete.
     * @example
     * // Delete a few Provinces
     * const { count } = await prisma.province.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProvinceDeleteManyArgs>(
      args?: SelectSubset<T, ProvinceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Provinces
     * const province = await prisma.province.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProvinceUpdateManyArgs>(
      args: SelectSubset<T, ProvinceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Province.
     * @param {ProvinceUpsertArgs} args - Arguments to update or create a Province.
     * @example
     * // Update or create a Province
     * const province = await prisma.province.upsert({
     *   create: {
     *     // ... data to create a Province
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Province we want to update
     *   }
     * })
    **/
    upsert<T extends ProvinceUpsertArgs>(
      args: SelectSubset<T, ProvinceUpsertArgs>
    ): Prisma__ProvinceClient<ProvinceGetPayload<T>>

    /**
     * Count the number of Provinces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceCountArgs} args - Arguments to filter Provinces to count.
     * @example
     * // Count the number of Provinces
     * const count = await prisma.province.count({
     *   where: {
     *     // ... the filter for the Provinces we want to count
     *   }
     * })
    **/
    count<T extends ProvinceCountArgs>(
      args?: Subset<T, ProvinceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProvinceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProvinceAggregateArgs>(args: Subset<T, ProvinceAggregateArgs>): Prisma.PrismaPromise<GetProvinceAggregateType<T>>

    /**
     * Group by Province.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProvinceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProvinceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProvinceGroupByArgs['orderBy'] }
        : { orderBy?: ProvinceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProvinceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProvinceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Province.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProvinceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cities<T extends Province$citiesArgs= {}>(args?: Subset<T, Province$citiesArgs>): Prisma.PrismaPromise<Array<CityGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Province base type for findUnique actions
   */
  export type ProvinceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter, which Province to fetch.
     */
    where: ProvinceWhereUniqueInput
  }

  /**
   * Province findUnique
   */
  export interface ProvinceFindUniqueArgs extends ProvinceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Province findUniqueOrThrow
   */
  export type ProvinceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter, which Province to fetch.
     */
    where: ProvinceWhereUniqueInput
  }


  /**
   * Province base type for findFirst actions
   */
  export type ProvinceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter, which Province to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: Enumerable<ProvinceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinces.
     */
    distinct?: Enumerable<ProvinceScalarFieldEnum>
  }

  /**
   * Province findFirst
   */
  export interface ProvinceFindFirstArgs extends ProvinceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Province findFirstOrThrow
   */
  export type ProvinceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter, which Province to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: Enumerable<ProvinceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Provinces.
     */
    distinct?: Enumerable<ProvinceScalarFieldEnum>
  }


  /**
   * Province findMany
   */
  export type ProvinceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter, which Provinces to fetch.
     */
    where?: ProvinceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Provinces to fetch.
     */
    orderBy?: Enumerable<ProvinceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Provinces.
     */
    cursor?: ProvinceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Provinces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Provinces.
     */
    skip?: number
    distinct?: Enumerable<ProvinceScalarFieldEnum>
  }


  /**
   * Province create
   */
  export type ProvinceCreateArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * The data needed to create a Province.
     */
    data: XOR<ProvinceCreateInput, ProvinceUncheckedCreateInput>
  }


  /**
   * Province createMany
   */
  export type ProvinceCreateManyArgs = {
    /**
     * The data used to create many Provinces.
     */
    data: Enumerable<ProvinceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Province update
   */
  export type ProvinceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * The data needed to update a Province.
     */
    data: XOR<ProvinceUpdateInput, ProvinceUncheckedUpdateInput>
    /**
     * Choose, which Province to update.
     */
    where: ProvinceWhereUniqueInput
  }


  /**
   * Province updateMany
   */
  export type ProvinceUpdateManyArgs = {
    /**
     * The data used to update Provinces.
     */
    data: XOR<ProvinceUpdateManyMutationInput, ProvinceUncheckedUpdateManyInput>
    /**
     * Filter which Provinces to update
     */
    where?: ProvinceWhereInput
  }


  /**
   * Province upsert
   */
  export type ProvinceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * The filter to search for the Province to update in case it exists.
     */
    where: ProvinceWhereUniqueInput
    /**
     * In case the Province found by the `where` argument doesn't exist, create a new Province with this data.
     */
    create: XOR<ProvinceCreateInput, ProvinceUncheckedCreateInput>
    /**
     * In case the Province was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProvinceUpdateInput, ProvinceUncheckedUpdateInput>
  }


  /**
   * Province delete
   */
  export type ProvinceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
    /**
     * Filter which Province to delete.
     */
    where: ProvinceWhereUniqueInput
  }


  /**
   * Province deleteMany
   */
  export type ProvinceDeleteManyArgs = {
    /**
     * Filter which Provinces to delete
     */
    where?: ProvinceWhereInput
  }


  /**
   * Province.cities
   */
  export type Province$citiesArgs = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CityInclude | null
    where?: CityWhereInput
    orderBy?: Enumerable<CityOrderByWithRelationInput>
    cursor?: CityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CityScalarFieldEnum>
  }


  /**
   * Province without action
   */
  export type ProvinceArgs = {
    /**
     * Select specific fields to fetch from the Province
     */
    select?: ProvinceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProvinceInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: number
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs
  }


  export type AccountInclude = {
    user?: boolean | UserArgs
  }

  export type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Account :
    S extends undefined ? never :
    S extends { include: any } & (AccountArgs | AccountFindManyArgs)
    ? Account  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (AccountArgs | AccountFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Account ? Account[P] : never
  } 
      : Account


  type AccountCountArgs = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<AccountGetPayload<T>> : Prisma__AccountClient<AccountGetPayload<T> | null, null>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): Prisma.PrismaPromise<Array<AccountGetPayload<T>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): Prisma__AccountClient<AccountGetPayload<T>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs extends AccountFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs extends AccountFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs
  }


  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Session :
    S extends undefined ? never :
    S extends { include: any } & (SessionArgs | SessionFindManyArgs)
    ? Session  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SessionArgs | SessionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
      : Session


  type SessionCountArgs = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<SessionGetPayload<T>> : Prisma__SessionClient<SessionGetPayload<T> | null, null>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): Prisma.PrismaPromise<Array<SessionGetPayload<T>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): Prisma__SessionClient<SessionGetPayload<T>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude | null
  }



  /**
   * Model testingData
   */


  export type AggregateTestingData = {
    _count: TestingDataCountAggregateOutputType | null
    _avg: TestingDataAvgAggregateOutputType | null
    _sum: TestingDataSumAggregateOutputType | null
    _min: TestingDataMinAggregateOutputType | null
    _max: TestingDataMaxAggregateOutputType | null
  }

  export type TestingDataAvgAggregateOutputType = {
    id: number | null
  }

  export type TestingDataSumAggregateOutputType = {
    id: number | null
  }

  export type TestingDataMinAggregateOutputType = {
    id: number | null
    name: string | null
    creationTime: Date | null
  }

  export type TestingDataMaxAggregateOutputType = {
    id: number | null
    name: string | null
    creationTime: Date | null
  }

  export type TestingDataCountAggregateOutputType = {
    id: number
    name: number
    creationTime: number
    jsonArray: number
    _all: number
  }


  export type TestingDataAvgAggregateInputType = {
    id?: true
  }

  export type TestingDataSumAggregateInputType = {
    id?: true
  }

  export type TestingDataMinAggregateInputType = {
    id?: true
    name?: true
    creationTime?: true
  }

  export type TestingDataMaxAggregateInputType = {
    id?: true
    name?: true
    creationTime?: true
  }

  export type TestingDataCountAggregateInputType = {
    id?: true
    name?: true
    creationTime?: true
    jsonArray?: true
    _all?: true
  }

  export type TestingDataAggregateArgs = {
    /**
     * Filter which testingData to aggregate.
     */
    where?: testingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testingData to fetch.
     */
    orderBy?: Enumerable<testingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: testingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned testingData
    **/
    _count?: true | TestingDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestingDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestingDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestingDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestingDataMaxAggregateInputType
  }

  export type GetTestingDataAggregateType<T extends TestingDataAggregateArgs> = {
        [P in keyof T & keyof AggregateTestingData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestingData[P]>
      : GetScalarType<T[P], AggregateTestingData[P]>
  }




  export type TestingDataGroupByArgs = {
    where?: testingDataWhereInput
    orderBy?: Enumerable<testingDataOrderByWithAggregationInput>
    by: TestingDataScalarFieldEnum[]
    having?: testingDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestingDataCountAggregateInputType | true
    _avg?: TestingDataAvgAggregateInputType
    _sum?: TestingDataSumAggregateInputType
    _min?: TestingDataMinAggregateInputType
    _max?: TestingDataMaxAggregateInputType
  }


  export type TestingDataGroupByOutputType = {
    id: number
    name: string
    creationTime: Date
    jsonArray: JsonValue | null
    _count: TestingDataCountAggregateOutputType | null
    _avg: TestingDataAvgAggregateOutputType | null
    _sum: TestingDataSumAggregateOutputType | null
    _min: TestingDataMinAggregateOutputType | null
    _max: TestingDataMaxAggregateOutputType | null
  }

  type GetTestingDataGroupByPayload<T extends TestingDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TestingDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestingDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestingDataGroupByOutputType[P]>
            : GetScalarType<T[P], TestingDataGroupByOutputType[P]>
        }
      >
    >


  export type testingDataSelect = {
    id?: boolean
    name?: boolean
    creationTime?: boolean
    jsonArray?: boolean
  }


  export type testingDataGetPayload<S extends boolean | null | undefined | testingDataArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? testingData :
    S extends undefined ? never :
    S extends { include: any } & (testingDataArgs | testingDataFindManyArgs)
    ? testingData 
    : S extends { select: any } & (testingDataArgs | testingDataFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof testingData ? testingData[P] : never
  } 
      : testingData


  type testingDataCountArgs = 
    Omit<testingDataFindManyArgs, 'select' | 'include'> & {
      select?: TestingDataCountAggregateInputType | true
    }

  export interface testingDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TestingData that matches the filter.
     * @param {testingDataFindUniqueArgs} args - Arguments to find a TestingData
     * @example
     * // Get one TestingData
     * const testingData = await prisma.testingData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends testingDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, testingDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'testingData'> extends True ? Prisma__testingDataClient<testingDataGetPayload<T>> : Prisma__testingDataClient<testingDataGetPayload<T> | null, null>

    /**
     * Find one TestingData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {testingDataFindUniqueOrThrowArgs} args - Arguments to find a TestingData
     * @example
     * // Get one TestingData
     * const testingData = await prisma.testingData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends testingDataFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, testingDataFindUniqueOrThrowArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Find the first TestingData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testingDataFindFirstArgs} args - Arguments to find a TestingData
     * @example
     * // Get one TestingData
     * const testingData = await prisma.testingData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends testingDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, testingDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'testingData'> extends True ? Prisma__testingDataClient<testingDataGetPayload<T>> : Prisma__testingDataClient<testingDataGetPayload<T> | null, null>

    /**
     * Find the first TestingData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testingDataFindFirstOrThrowArgs} args - Arguments to find a TestingData
     * @example
     * // Get one TestingData
     * const testingData = await prisma.testingData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends testingDataFindFirstOrThrowArgs>(
      args?: SelectSubset<T, testingDataFindFirstOrThrowArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Find zero or more TestingData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testingDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TestingData
     * const testingData = await prisma.testingData.findMany()
     * 
     * // Get first 10 TestingData
     * const testingData = await prisma.testingData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testingDataWithIdOnly = await prisma.testingData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends testingDataFindManyArgs>(
      args?: SelectSubset<T, testingDataFindManyArgs>
    ): Prisma.PrismaPromise<Array<testingDataGetPayload<T>>>

    /**
     * Create a TestingData.
     * @param {testingDataCreateArgs} args - Arguments to create a TestingData.
     * @example
     * // Create one TestingData
     * const TestingData = await prisma.testingData.create({
     *   data: {
     *     // ... data to create a TestingData
     *   }
     * })
     * 
    **/
    create<T extends testingDataCreateArgs>(
      args: SelectSubset<T, testingDataCreateArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Create many TestingData.
     *     @param {testingDataCreateManyArgs} args - Arguments to create many TestingData.
     *     @example
     *     // Create many TestingData
     *     const testingData = await prisma.testingData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends testingDataCreateManyArgs>(
      args?: SelectSubset<T, testingDataCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TestingData.
     * @param {testingDataDeleteArgs} args - Arguments to delete one TestingData.
     * @example
     * // Delete one TestingData
     * const TestingData = await prisma.testingData.delete({
     *   where: {
     *     // ... filter to delete one TestingData
     *   }
     * })
     * 
    **/
    delete<T extends testingDataDeleteArgs>(
      args: SelectSubset<T, testingDataDeleteArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Update one TestingData.
     * @param {testingDataUpdateArgs} args - Arguments to update one TestingData.
     * @example
     * // Update one TestingData
     * const testingData = await prisma.testingData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends testingDataUpdateArgs>(
      args: SelectSubset<T, testingDataUpdateArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Delete zero or more TestingData.
     * @param {testingDataDeleteManyArgs} args - Arguments to filter TestingData to delete.
     * @example
     * // Delete a few TestingData
     * const { count } = await prisma.testingData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends testingDataDeleteManyArgs>(
      args?: SelectSubset<T, testingDataDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TestingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testingDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TestingData
     * const testingData = await prisma.testingData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends testingDataUpdateManyArgs>(
      args: SelectSubset<T, testingDataUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TestingData.
     * @param {testingDataUpsertArgs} args - Arguments to update or create a TestingData.
     * @example
     * // Update or create a TestingData
     * const testingData = await prisma.testingData.upsert({
     *   create: {
     *     // ... data to create a TestingData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TestingData we want to update
     *   }
     * })
    **/
    upsert<T extends testingDataUpsertArgs>(
      args: SelectSubset<T, testingDataUpsertArgs>
    ): Prisma__testingDataClient<testingDataGetPayload<T>>

    /**
     * Count the number of TestingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {testingDataCountArgs} args - Arguments to filter TestingData to count.
     * @example
     * // Count the number of TestingData
     * const count = await prisma.testingData.count({
     *   where: {
     *     // ... the filter for the TestingData we want to count
     *   }
     * })
    **/
    count<T extends testingDataCountArgs>(
      args?: Subset<T, testingDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestingDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TestingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestingDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestingDataAggregateArgs>(args: Subset<T, TestingDataAggregateArgs>): Prisma.PrismaPromise<GetTestingDataAggregateType<T>>

    /**
     * Group by TestingData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestingDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestingDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestingDataGroupByArgs['orderBy'] }
        : { orderBy?: TestingDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestingDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestingDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for testingData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__testingDataClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * testingData base type for findUnique actions
   */
  export type testingDataFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter, which testingData to fetch.
     */
    where: testingDataWhereUniqueInput
  }

  /**
   * testingData findUnique
   */
  export interface testingDataFindUniqueArgs extends testingDataFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * testingData findUniqueOrThrow
   */
  export type testingDataFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter, which testingData to fetch.
     */
    where: testingDataWhereUniqueInput
  }


  /**
   * testingData base type for findFirst actions
   */
  export type testingDataFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter, which testingData to fetch.
     */
    where?: testingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testingData to fetch.
     */
    orderBy?: Enumerable<testingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testingData.
     */
    cursor?: testingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testingData.
     */
    distinct?: Enumerable<TestingDataScalarFieldEnum>
  }

  /**
   * testingData findFirst
   */
  export interface testingDataFindFirstArgs extends testingDataFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * testingData findFirstOrThrow
   */
  export type testingDataFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter, which testingData to fetch.
     */
    where?: testingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testingData to fetch.
     */
    orderBy?: Enumerable<testingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for testingData.
     */
    cursor?: testingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testingData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of testingData.
     */
    distinct?: Enumerable<TestingDataScalarFieldEnum>
  }


  /**
   * testingData findMany
   */
  export type testingDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter, which testingData to fetch.
     */
    where?: testingDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of testingData to fetch.
     */
    orderBy?: Enumerable<testingDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing testingData.
     */
    cursor?: testingDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` testingData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` testingData.
     */
    skip?: number
    distinct?: Enumerable<TestingDataScalarFieldEnum>
  }


  /**
   * testingData create
   */
  export type testingDataCreateArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * The data needed to create a testingData.
     */
    data: XOR<testingDataCreateInput, testingDataUncheckedCreateInput>
  }


  /**
   * testingData createMany
   */
  export type testingDataCreateManyArgs = {
    /**
     * The data used to create many testingData.
     */
    data: Enumerable<testingDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * testingData update
   */
  export type testingDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * The data needed to update a testingData.
     */
    data: XOR<testingDataUpdateInput, testingDataUncheckedUpdateInput>
    /**
     * Choose, which testingData to update.
     */
    where: testingDataWhereUniqueInput
  }


  /**
   * testingData updateMany
   */
  export type testingDataUpdateManyArgs = {
    /**
     * The data used to update testingData.
     */
    data: XOR<testingDataUpdateManyMutationInput, testingDataUncheckedUpdateManyInput>
    /**
     * Filter which testingData to update
     */
    where?: testingDataWhereInput
  }


  /**
   * testingData upsert
   */
  export type testingDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * The filter to search for the testingData to update in case it exists.
     */
    where: testingDataWhereUniqueInput
    /**
     * In case the testingData found by the `where` argument doesn't exist, create a new testingData with this data.
     */
    create: XOR<testingDataCreateInput, testingDataUncheckedCreateInput>
    /**
     * In case the testingData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<testingDataUpdateInput, testingDataUncheckedUpdateInput>
  }


  /**
   * testingData delete
   */
  export type testingDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
    /**
     * Filter which testingData to delete.
     */
    where: testingDataWhereUniqueInput
  }


  /**
   * testingData deleteMany
   */
  export type testingDataDeleteManyArgs = {
    /**
     * Filter which testingData to delete
     */
    where?: testingDataWhereInput
  }


  /**
   * testingData without action
   */
  export type testingDataArgs = {
    /**
     * Select specific fields to fetch from the testingData
     */
    select?: testingDataSelect | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: VerificationTokenScalarFieldEnum[]
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? VerificationToken :
    S extends undefined ? never :
    S extends { include: any } & (VerificationTokenArgs | VerificationTokenFindManyArgs)
    ? VerificationToken 
    : S extends { select: any } & (VerificationTokenArgs | VerificationTokenFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof VerificationToken ? VerificationToken[P] : never
  } 
      : VerificationToken


  type VerificationTokenCountArgs = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>> : Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null, null>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>> : Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null, null>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs>
    ): Prisma.PrismaPromise<Array<VerificationTokenGetPayload<T>>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs>
    ): Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VerificationToken base type for findUnique actions
   */
  export type VerificationTokenFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUnique
   */
  export interface VerificationTokenFindUniqueArgs extends VerificationTokenFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken base type for findFirst actions
   */
  export type VerificationTokenFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }

  /**
   * VerificationToken findFirst
   */
  export interface VerificationTokenFindFirstArgs extends VerificationTokenFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    city: 'city',
    province_id: 'province_id'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const CompanyCollaborationScalarFieldEnum: {
    id: 'id',
    source_id: 'source_id',
    collaborator_id: 'collaborator_id'
  };

  export type CompanyCollaborationScalarFieldEnum = (typeof CompanyCollaborationScalarFieldEnum)[keyof typeof CompanyCollaborationScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    company: 'company',
    admin_code: 'admin_code',
    user_code: 'user_code',
    address_line_1: 'address_line_1',
    address_line_2: 'address_line_2',
    email: 'email',
    phone: 'phone',
    city_id: 'city_id',
    zip_code: 'zip_code',
    company_type: 'company_type'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const EntryScalarFieldEnum: {
    id: 'id',
    collaborator: 'collaborator',
    created_at: 'created_at',
    updated_at: 'updated_at',
    weight: 'weight',
    waste_id: 'waste_id',
    user_id: 'user_id',
    site_id: 'site_id',
    company_id: 'company_id'
  };

  export type EntryScalarFieldEnum = (typeof EntryScalarFieldEnum)[keyof typeof EntryScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const ProvinceScalarFieldEnum: {
    id: 'id',
    province: 'province'
  };

  export type ProvinceScalarFieldEnum = (typeof ProvinceScalarFieldEnum)[keyof typeof ProvinceScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    site: 'site'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TestingDataScalarFieldEnum: {
    id: 'id',
    name: 'name',
    creationTime: 'creationTime',
    jsonArray: 'jsonArray'
  };

  export type TestingDataScalarFieldEnum = (typeof TestingDataScalarFieldEnum)[keyof typeof TestingDataScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    image: 'image',
    role: 'role',
    company_id: 'company_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const WasteScalarFieldEnum: {
    id: 'id',
    waste: 'waste',
    waste_type: 'waste_type'
  };

  export type WasteScalarFieldEnum = (typeof WasteScalarFieldEnum)[keyof typeof WasteScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    role?: EnumRoleFilter | Role
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    entries?: EntryListRelationFilter
    company?: XOR<CompanyRelationFilter, CompanyWhereInput> | null
    company_id?: IntNullableFilter | number | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    entries?: EntryOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
    company_id?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    role?: EnumRoleWithAggregatesFilter | Role
    company_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type WasteWhereInput = {
    AND?: Enumerable<WasteWhereInput>
    OR?: Enumerable<WasteWhereInput>
    NOT?: Enumerable<WasteWhereInput>
    id?: IntFilter | number
    waste?: StringFilter | string
    waste_type?: EnumWasteTypeFilter | WasteType
    entries?: EntryListRelationFilter
  }

  export type WasteOrderByWithRelationInput = {
    id?: SortOrder
    waste?: SortOrder
    waste_type?: SortOrder
    entries?: EntryOrderByRelationAggregateInput
  }

  export type WasteWhereUniqueInput = {
    id?: number
  }

  export type WasteOrderByWithAggregationInput = {
    id?: SortOrder
    waste?: SortOrder
    waste_type?: SortOrder
    _count?: WasteCountOrderByAggregateInput
    _avg?: WasteAvgOrderByAggregateInput
    _max?: WasteMaxOrderByAggregateInput
    _min?: WasteMinOrderByAggregateInput
    _sum?: WasteSumOrderByAggregateInput
  }

  export type WasteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WasteScalarWhereWithAggregatesInput>
    OR?: Enumerable<WasteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WasteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    waste?: StringWithAggregatesFilter | string
    waste_type?: EnumWasteTypeWithAggregatesFilter | WasteType
  }

  export type EntryWhereInput = {
    AND?: Enumerable<EntryWhereInput>
    OR?: Enumerable<EntryWhereInput>
    NOT?: Enumerable<EntryWhereInput>
    id?: IntFilter | number
    collaborator?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    weight?: FloatFilter | number
    waste?: XOR<WasteRelationFilter, WasteWhereInput>
    waste_id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    user_id?: StringFilter | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
    site_id?: IntFilter | number
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    company_id?: IntFilter | number
  }

  export type EntryOrderByWithRelationInput = {
    id?: SortOrder
    collaborator?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    weight?: SortOrder
    waste?: WasteOrderByWithRelationInput
    waste_id?: SortOrder
    user?: UserOrderByWithRelationInput
    user_id?: SortOrder
    site?: SiteOrderByWithRelationInput
    site_id?: SortOrder
    company?: CompanyOrderByWithRelationInput
    company_id?: SortOrder
  }

  export type EntryWhereUniqueInput = {
    id?: number
  }

  export type EntryOrderByWithAggregationInput = {
    id?: SortOrder
    collaborator?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    user_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
    _count?: EntryCountOrderByAggregateInput
    _avg?: EntryAvgOrderByAggregateInput
    _max?: EntryMaxOrderByAggregateInput
    _min?: EntryMinOrderByAggregateInput
    _sum?: EntrySumOrderByAggregateInput
  }

  export type EntryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EntryScalarWhereWithAggregatesInput>
    OR?: Enumerable<EntryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EntryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    collaborator?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    weight?: FloatWithAggregatesFilter | number
    waste_id?: IntWithAggregatesFilter | number
    user_id?: StringWithAggregatesFilter | string
    site_id?: IntWithAggregatesFilter | number
    company_id?: IntWithAggregatesFilter | number
  }

  export type CompanyWhereInput = {
    AND?: Enumerable<CompanyWhereInput>
    OR?: Enumerable<CompanyWhereInput>
    NOT?: Enumerable<CompanyWhereInput>
    id?: IntFilter | number
    company?: StringFilter | string
    admin_code?: StringFilter | string
    user_code?: StringFilter | string
    address_line_1?: StringFilter | string
    address_line_2?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    city?: XOR<CityRelationFilter, CityWhereInput>
    city_id?: IntFilter | number
    zip_code?: StringFilter | string
    company_type?: EnumCompanyTypeFilter | CompanyType
    users?: UserListRelationFilter
    source_company?: CompanyCollaborationListRelationFilter
    collector_company?: CompanyCollaborationListRelationFilter
    entries?: EntryListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    company?: SortOrder
    admin_code?: SortOrder
    user_code?: SortOrder
    address_line_1?: SortOrder
    address_line_2?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    city?: CityOrderByWithRelationInput
    city_id?: SortOrder
    zip_code?: SortOrder
    company_type?: SortOrder
    users?: UserOrderByRelationAggregateInput
    source_company?: CompanyCollaborationOrderByRelationAggregateInput
    collector_company?: CompanyCollaborationOrderByRelationAggregateInput
    entries?: EntryOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = {
    id?: number
    company?: string
  }

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    company?: SortOrder
    admin_code?: SortOrder
    user_code?: SortOrder
    address_line_1?: SortOrder
    address_line_2?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    city_id?: SortOrder
    zip_code?: SortOrder
    company_type?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompanyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    company?: StringWithAggregatesFilter | string
    admin_code?: StringWithAggregatesFilter | string
    user_code?: StringWithAggregatesFilter | string
    address_line_1?: StringWithAggregatesFilter | string
    address_line_2?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    city_id?: IntWithAggregatesFilter | number
    zip_code?: StringWithAggregatesFilter | string
    company_type?: EnumCompanyTypeWithAggregatesFilter | CompanyType
  }

  export type CompanyCollaborationWhereInput = {
    AND?: Enumerable<CompanyCollaborationWhereInput>
    OR?: Enumerable<CompanyCollaborationWhereInput>
    NOT?: Enumerable<CompanyCollaborationWhereInput>
    id?: IntFilter | number
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    source_id?: IntFilter | number
    collaborator?: XOR<CompanyRelationFilter, CompanyWhereInput>
    collaborator_id?: IntFilter | number
  }

  export type CompanyCollaborationOrderByWithRelationInput = {
    id?: SortOrder
    company?: CompanyOrderByWithRelationInput
    source_id?: SortOrder
    collaborator?: CompanyOrderByWithRelationInput
    collaborator_id?: SortOrder
  }

  export type CompanyCollaborationWhereUniqueInput = {
    id?: number
    source_id_collaborator_id?: CompanyCollaborationSource_idCollaborator_idCompoundUniqueInput
  }

  export type CompanyCollaborationOrderByWithAggregationInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
    _count?: CompanyCollaborationCountOrderByAggregateInput
    _avg?: CompanyCollaborationAvgOrderByAggregateInput
    _max?: CompanyCollaborationMaxOrderByAggregateInput
    _min?: CompanyCollaborationMinOrderByAggregateInput
    _sum?: CompanyCollaborationSumOrderByAggregateInput
  }

  export type CompanyCollaborationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompanyCollaborationScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompanyCollaborationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompanyCollaborationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    source_id?: IntWithAggregatesFilter | number
    collaborator_id?: IntWithAggregatesFilter | number
  }

  export type SiteWhereInput = {
    AND?: Enumerable<SiteWhereInput>
    OR?: Enumerable<SiteWhereInput>
    NOT?: Enumerable<SiteWhereInput>
    id?: IntFilter | number
    site?: StringFilter | string
    entries?: EntryListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    site?: SortOrder
    entries?: EntryOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = {
    id?: number
  }

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    site?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    site?: StringWithAggregatesFilter | string
  }

  export type CityWhereInput = {
    AND?: Enumerable<CityWhereInput>
    OR?: Enumerable<CityWhereInput>
    NOT?: Enumerable<CityWhereInput>
    id?: IntFilter | number
    city?: StringFilter | string
    province?: XOR<ProvinceRelationFilter, ProvinceWhereInput>
    province_id?: IntFilter | number
    Companies?: CompanyListRelationFilter
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    city?: SortOrder
    province?: ProvinceOrderByWithRelationInput
    province_id?: SortOrder
    Companies?: CompanyOrderByRelationAggregateInput
  }

  export type CityWhereUniqueInput = {
    id?: number
    city?: string
  }

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    city?: SortOrder
    province_id?: SortOrder
    _count?: CityCountOrderByAggregateInput
    _avg?: CityAvgOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
    _sum?: CitySumOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CityScalarWhereWithAggregatesInput>
    OR?: Enumerable<CityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    city?: StringWithAggregatesFilter | string
    province_id?: IntWithAggregatesFilter | number
  }

  export type ProvinceWhereInput = {
    AND?: Enumerable<ProvinceWhereInput>
    OR?: Enumerable<ProvinceWhereInput>
    NOT?: Enumerable<ProvinceWhereInput>
    id?: IntFilter | number
    province?: StringFilter | string
    cities?: CityListRelationFilter
  }

  export type ProvinceOrderByWithRelationInput = {
    id?: SortOrder
    province?: SortOrder
    cities?: CityOrderByRelationAggregateInput
  }

  export type ProvinceWhereUniqueInput = {
    id?: number
    province?: string
  }

  export type ProvinceOrderByWithAggregationInput = {
    id?: SortOrder
    province?: SortOrder
    _count?: ProvinceCountOrderByAggregateInput
    _avg?: ProvinceAvgOrderByAggregateInput
    _max?: ProvinceMaxOrderByAggregateInput
    _min?: ProvinceMinOrderByAggregateInput
    _sum?: ProvinceSumOrderByAggregateInput
  }

  export type ProvinceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProvinceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProvinceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProvinceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    province?: StringWithAggregatesFilter | string
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: number
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: number
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type testingDataWhereInput = {
    AND?: Enumerable<testingDataWhereInput>
    OR?: Enumerable<testingDataWhereInput>
    NOT?: Enumerable<testingDataWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    creationTime?: DateTimeFilter | Date | string
    jsonArray?: JsonNullableFilter
  }

  export type testingDataOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    creationTime?: SortOrder
    jsonArray?: SortOrder
  }

  export type testingDataWhereUniqueInput = {
    id?: number
  }

  export type testingDataOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    creationTime?: SortOrder
    jsonArray?: SortOrder
    _count?: testingDataCountOrderByAggregateInput
    _avg?: testingDataAvgOrderByAggregateInput
    _max?: testingDataMaxOrderByAggregateInput
    _min?: testingDataMinOrderByAggregateInput
    _sum?: testingDataSumOrderByAggregateInput
  }

  export type testingDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<testingDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<testingDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<testingDataScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    creationTime?: DateTimeWithAggregatesFilter | Date | string
    jsonArray?: JsonNullableWithAggregatesFilter
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    entries?: EntryCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    entries?: EntryUncheckedCreateNestedManyWithoutUserInput
    company_id?: number | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    entries?: EntryUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    entries?: EntryUncheckedUpdateManyWithoutUserNestedInput
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    company_id?: number | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WasteCreateInput = {
    waste: string
    waste_type: WasteType
    entries?: EntryCreateNestedManyWithoutWasteInput
  }

  export type WasteUncheckedCreateInput = {
    id?: number
    waste: string
    waste_type: WasteType
    entries?: EntryUncheckedCreateNestedManyWithoutWasteInput
  }

  export type WasteUpdateInput = {
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
    entries?: EntryUpdateManyWithoutWasteNestedInput
  }

  export type WasteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
    entries?: EntryUncheckedUpdateManyWithoutWasteNestedInput
  }

  export type WasteCreateManyInput = {
    id?: number
    waste: string
    waste_type: WasteType
  }

  export type WasteUpdateManyMutationInput = {
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
  }

  export type WasteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
  }

  export type EntryCreateInput = {
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste: WasteCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutEntriesInput
    site: SiteCreateNestedOneWithoutEntriesInput
    company: CompanyCreateNestedOneWithoutEntriesInput
  }

  export type EntryUncheckedCreateInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    site_id: number
    company_id: number
  }

  export type EntryUpdateInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste?: WasteUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutEntriesNestedInput
    site?: SiteUpdateOneRequiredWithoutEntriesNestedInput
    company?: CompanyUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type EntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    site_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type EntryCreateManyInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    site_id: number
    company_id: number
  }

  export type EntryUpdateManyMutationInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
  }

  export type EntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    site_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCreateInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city: CityCreateNestedOneWithoutCompaniesInput
    zip_code: string
    company_type: CompanyType
    users?: UserCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationCreateNestedManyWithoutCompanyInput
    entries?: EntryCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput
    entries?: EntryUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city?: CityUpdateOneRequiredWithoutCompaniesNestedInput
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUpdateManyWithoutCompanyNestedInput
    entries?: EntryUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput
    entries?: EntryUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
  }

  export type CompanyUpdateManyMutationInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
  }

  export type CompanyCollaborationCreateInput = {
    company: CompanyCreateNestedOneWithoutCollector_companyInput
    collaborator: CompanyCreateNestedOneWithoutSource_companyInput
  }

  export type CompanyCollaborationUncheckedCreateInput = {
    id?: number
    source_id: number
    collaborator_id: number
  }

  export type CompanyCollaborationUpdateInput = {
    company?: CompanyUpdateOneRequiredWithoutCollector_companyNestedInput
    collaborator?: CompanyUpdateOneRequiredWithoutSource_companyNestedInput
  }

  export type CompanyCollaborationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    collaborator_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCollaborationCreateManyInput = {
    id?: number
    source_id: number
    collaborator_id: number
  }

  export type CompanyCollaborationUpdateManyMutationInput = {

  }

  export type CompanyCollaborationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
    collaborator_id?: IntFieldUpdateOperationsInput | number
  }

  export type SiteCreateInput = {
    site: string
    entries?: EntryCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    site: string
    entries?: EntryUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    site?: StringFieldUpdateOperationsInput | string
    entries?: EntryUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
    entries?: EntryUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: number
    site: string
  }

  export type SiteUpdateManyMutationInput = {
    site?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
  }

  export type CityCreateInput = {
    city: string
    province: ProvinceCreateNestedOneWithoutCitiesInput
    Companies?: CompanyCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateInput = {
    id?: number
    city: string
    province_id: number
    Companies?: CompanyUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityUpdateInput = {
    city?: StringFieldUpdateOperationsInput | string
    province?: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
    Companies?: CompanyUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
    Companies?: CompanyUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityCreateManyInput = {
    id?: number
    city: string
    province_id: number
  }

  export type CityUpdateManyMutationInput = {
    city?: StringFieldUpdateOperationsInput | string
  }

  export type CityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProvinceCreateInput = {
    province: string
    cities?: CityCreateNestedManyWithoutProvinceInput
  }

  export type ProvinceUncheckedCreateInput = {
    id?: number
    province: string
    cities?: CityUncheckedCreateNestedManyWithoutProvinceInput
  }

  export type ProvinceUpdateInput = {
    province?: StringFieldUpdateOperationsInput | string
    cities?: CityUpdateManyWithoutProvinceNestedInput
  }

  export type ProvinceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
    cities?: CityUncheckedUpdateManyWithoutProvinceNestedInput
  }

  export type ProvinceCreateManyInput = {
    id?: number
    province: string
  }

  export type ProvinceUpdateManyMutationInput = {
    province?: StringFieldUpdateOperationsInput | string
  }

  export type ProvinceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: number
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type testingDataCreateInput = {
    name: string
    creationTime?: Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataUncheckedCreateInput = {
    id?: number
    name: string
    creationTime?: Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataCreateManyInput = {
    id?: number
    name: string
    creationTime?: Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type testingDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    creationTime?: DateTimeFieldUpdateOperationsInput | Date | string
    jsonArray?: NullableJsonNullValueInput | InputJsonValue
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type EntryListRelationFilter = {
    every?: EntryWhereInput
    some?: EntryWhereInput
    none?: EntryWhereInput
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    image?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumWasteTypeFilter = {
    equals?: WasteType
    in?: Enumerable<WasteType>
    notIn?: Enumerable<WasteType>
    not?: NestedEnumWasteTypeFilter | WasteType
  }

  export type WasteCountOrderByAggregateInput = {
    id?: SortOrder
    waste?: SortOrder
    waste_type?: SortOrder
  }

  export type WasteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WasteMaxOrderByAggregateInput = {
    id?: SortOrder
    waste?: SortOrder
    waste_type?: SortOrder
  }

  export type WasteMinOrderByAggregateInput = {
    id?: SortOrder
    waste?: SortOrder
    waste_type?: SortOrder
  }

  export type WasteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumWasteTypeWithAggregatesFilter = {
    equals?: WasteType
    in?: Enumerable<WasteType>
    notIn?: Enumerable<WasteType>
    not?: NestedEnumWasteTypeWithAggregatesFilter | WasteType
    _count?: NestedIntFilter
    _min?: NestedEnumWasteTypeFilter
    _max?: NestedEnumWasteTypeFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type WasteRelationFilter = {
    is?: WasteWhereInput
    isNot?: WasteWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SiteRelationFilter = {
    is?: SiteWhereInput
    isNot?: SiteWhereInput
  }

  export type EntryCountOrderByAggregateInput = {
    id?: SortOrder
    collaborator?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    user_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
  }

  export type EntryAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
  }

  export type EntryMaxOrderByAggregateInput = {
    id?: SortOrder
    collaborator?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    user_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
  }

  export type EntryMinOrderByAggregateInput = {
    id?: SortOrder
    collaborator?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    user_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
  }

  export type EntrySumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    waste_id?: SortOrder
    site_id?: SortOrder
    company_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type CityRelationFilter = {
    is?: CityWhereInput
    isNot?: CityWhereInput
  }

  export type EnumCompanyTypeFilter = {
    equals?: CompanyType
    in?: Enumerable<CompanyType>
    notIn?: Enumerable<CompanyType>
    not?: NestedEnumCompanyTypeFilter | CompanyType
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type CompanyCollaborationListRelationFilter = {
    every?: CompanyCollaborationWhereInput
    some?: CompanyCollaborationWhereInput
    none?: CompanyCollaborationWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCollaborationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    admin_code?: SortOrder
    user_code?: SortOrder
    address_line_1?: SortOrder
    address_line_2?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    city_id?: SortOrder
    zip_code?: SortOrder
    company_type?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
    city_id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    admin_code?: SortOrder
    user_code?: SortOrder
    address_line_1?: SortOrder
    address_line_2?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    city_id?: SortOrder
    zip_code?: SortOrder
    company_type?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    company?: SortOrder
    admin_code?: SortOrder
    user_code?: SortOrder
    address_line_1?: SortOrder
    address_line_2?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    city_id?: SortOrder
    zip_code?: SortOrder
    company_type?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
    city_id?: SortOrder
  }

  export type EnumCompanyTypeWithAggregatesFilter = {
    equals?: CompanyType
    in?: Enumerable<CompanyType>
    notIn?: Enumerable<CompanyType>
    not?: NestedEnumCompanyTypeWithAggregatesFilter | CompanyType
    _count?: NestedIntFilter
    _min?: NestedEnumCompanyTypeFilter
    _max?: NestedEnumCompanyTypeFilter
  }

  export type CompanyCollaborationSource_idCollaborator_idCompoundUniqueInput = {
    source_id: number
    collaborator_id: number
  }

  export type CompanyCollaborationCountOrderByAggregateInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
  }

  export type CompanyCollaborationAvgOrderByAggregateInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
  }

  export type CompanyCollaborationMaxOrderByAggregateInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
  }

  export type CompanyCollaborationMinOrderByAggregateInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
  }

  export type CompanyCollaborationSumOrderByAggregateInput = {
    id?: SortOrder
    source_id?: SortOrder
    collaborator_id?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    site?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProvinceRelationFilter = {
    is?: ProvinceWhereInput
    isNot?: ProvinceWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    province_id?: SortOrder
  }

  export type CityAvgOrderByAggregateInput = {
    id?: SortOrder
    province_id?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    province_id?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    city?: SortOrder
    province_id?: SortOrder
  }

  export type CitySumOrderByAggregateInput = {
    id?: SortOrder
    province_id?: SortOrder
  }

  export type CityListRelationFilter = {
    every?: CityWhereInput
    some?: CityWhereInput
    none?: CityWhereInput
  }

  export type CityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProvinceCountOrderByAggregateInput = {
    id?: SortOrder
    province?: SortOrder
  }

  export type ProvinceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProvinceMaxOrderByAggregateInput = {
    id?: SortOrder
    province?: SortOrder
  }

  export type ProvinceMinOrderByAggregateInput = {
    id?: SortOrder
    province?: SortOrder
  }

  export type ProvinceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type testingDataCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creationTime?: SortOrder
    jsonArray?: SortOrder
  }

  export type testingDataAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type testingDataMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creationTime?: SortOrder
  }

  export type testingDataMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    creationTime?: SortOrder
  }

  export type testingDataSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type EntryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EntryCreateWithoutUserInput>, Enumerable<EntryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutUserInput>
    createMany?: EntryCreateManyUserInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type CompanyCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    connect?: CompanyWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type EntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EntryCreateWithoutUserInput>, Enumerable<EntryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutUserInput>
    createMany?: EntryCreateManyUserInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type EntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutUserInput>, Enumerable<EntryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EntryCreateManyUserInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type CompanyUpdateOneWithoutUsersNestedInput = {
    create?: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsersInput
    upsert?: CompanyUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type EntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutUserInput>, Enumerable<EntryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EntryCreateManyUserInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EntryCreateNestedManyWithoutWasteInput = {
    create?: XOR<Enumerable<EntryCreateWithoutWasteInput>, Enumerable<EntryUncheckedCreateWithoutWasteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutWasteInput>
    createMany?: EntryCreateManyWasteInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type EntryUncheckedCreateNestedManyWithoutWasteInput = {
    create?: XOR<Enumerable<EntryCreateWithoutWasteInput>, Enumerable<EntryUncheckedCreateWithoutWasteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutWasteInput>
    createMany?: EntryCreateManyWasteInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type EnumWasteTypeFieldUpdateOperationsInput = {
    set?: WasteType
  }

  export type EntryUpdateManyWithoutWasteNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutWasteInput>, Enumerable<EntryUncheckedCreateWithoutWasteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutWasteInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutWasteInput>
    createMany?: EntryCreateManyWasteInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutWasteInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutWasteInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EntryUncheckedUpdateManyWithoutWasteNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutWasteInput>, Enumerable<EntryUncheckedCreateWithoutWasteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutWasteInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutWasteInput>
    createMany?: EntryCreateManyWasteInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutWasteInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutWasteInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type WasteCreateNestedOneWithoutEntriesInput = {
    create?: XOR<WasteCreateWithoutEntriesInput, WasteUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: WasteCreateOrConnectWithoutEntriesInput
    connect?: WasteWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEntriesInput = {
    create?: XOR<UserCreateWithoutEntriesInput, UserUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type SiteCreateNestedOneWithoutEntriesInput = {
    create?: XOR<SiteCreateWithoutEntriesInput, SiteUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEntriesInput
    connect?: SiteWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutEntriesInput = {
    create?: XOR<CompanyCreateWithoutEntriesInput, CompanyUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEntriesInput
    connect?: CompanyWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WasteUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<WasteCreateWithoutEntriesInput, WasteUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: WasteCreateOrConnectWithoutEntriesInput
    upsert?: WasteUpsertWithoutEntriesInput
    connect?: WasteWhereUniqueInput
    update?: XOR<WasteUpdateWithoutEntriesInput, WasteUncheckedUpdateWithoutEntriesInput>
  }

  export type UserUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<UserCreateWithoutEntriesInput, UserUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutEntriesInput
    upsert?: UserUpsertWithoutEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEntriesInput, UserUncheckedUpdateWithoutEntriesInput>
  }

  export type SiteUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<SiteCreateWithoutEntriesInput, SiteUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEntriesInput
    upsert?: SiteUpsertWithoutEntriesInput
    connect?: SiteWhereUniqueInput
    update?: XOR<SiteUpdateWithoutEntriesInput, SiteUncheckedUpdateWithoutEntriesInput>
  }

  export type CompanyUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<CompanyCreateWithoutEntriesInput, CompanyUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutEntriesInput
    upsert?: CompanyUpsertWithoutEntriesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<CompanyUpdateWithoutEntriesInput, CompanyUncheckedUpdateWithoutEntriesInput>
  }

  export type CityCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<CityCreateWithoutCompaniesInput, CityUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: CityCreateOrConnectWithoutCompaniesInput
    connect?: CityWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<UserCreateWithoutCompanyInput>, Enumerable<UserUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCompanyInput>
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type CompanyCollaborationCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCollaboratorInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCollaboratorInput>
    createMany?: CompanyCollaborationCreateManyCollaboratorInputEnvelope
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
  }

  export type CompanyCollaborationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCompanyInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCompanyInput>
    createMany?: CompanyCollaborationCreateManyCompanyInputEnvelope
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
  }

  export type EntryCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<EntryCreateWithoutCompanyInput>, Enumerable<EntryUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutCompanyInput>
    createMany?: EntryCreateManyCompanyInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<UserCreateWithoutCompanyInput>, Enumerable<UserUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCompanyInput>
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCollaboratorInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCollaboratorInput>
    createMany?: CompanyCollaborationCreateManyCollaboratorInputEnvelope
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
  }

  export type CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCompanyInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCompanyInput>
    createMany?: CompanyCollaborationCreateManyCompanyInputEnvelope
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
  }

  export type EntryUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<Enumerable<EntryCreateWithoutCompanyInput>, Enumerable<EntryUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutCompanyInput>
    createMany?: EntryCreateManyCompanyInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type CityUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<CityCreateWithoutCompaniesInput, CityUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: CityCreateOrConnectWithoutCompaniesInput
    upsert?: CityUpsertWithoutCompaniesInput
    connect?: CityWhereUniqueInput
    update?: XOR<CityUpdateWithoutCompaniesInput, CityUncheckedUpdateWithoutCompaniesInput>
  }

  export type EnumCompanyTypeFieldUpdateOperationsInput = {
    set?: CompanyType
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutCompanyInput>, Enumerable<UserUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCollaboratorInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCollaboratorInput>
    upsert?: Enumerable<CompanyCollaborationUpsertWithWhereUniqueWithoutCollaboratorInput>
    createMany?: CompanyCollaborationCreateManyCollaboratorInputEnvelope
    set?: Enumerable<CompanyCollaborationWhereUniqueInput>
    disconnect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    delete?: Enumerable<CompanyCollaborationWhereUniqueInput>
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    update?: Enumerable<CompanyCollaborationUpdateWithWhereUniqueWithoutCollaboratorInput>
    updateMany?: Enumerable<CompanyCollaborationUpdateManyWithWhereWithoutCollaboratorInput>
    deleteMany?: Enumerable<CompanyCollaborationScalarWhereInput>
  }

  export type CompanyCollaborationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCompanyInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<CompanyCollaborationUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: CompanyCollaborationCreateManyCompanyInputEnvelope
    set?: Enumerable<CompanyCollaborationWhereUniqueInput>
    disconnect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    delete?: Enumerable<CompanyCollaborationWhereUniqueInput>
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    update?: Enumerable<CompanyCollaborationUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<CompanyCollaborationUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<CompanyCollaborationScalarWhereInput>
  }

  export type EntryUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutCompanyInput>, Enumerable<EntryUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: EntryCreateManyCompanyInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutCompanyInput>, Enumerable<UserUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCollaboratorInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCollaboratorInput>
    upsert?: Enumerable<CompanyCollaborationUpsertWithWhereUniqueWithoutCollaboratorInput>
    createMany?: CompanyCollaborationCreateManyCollaboratorInputEnvelope
    set?: Enumerable<CompanyCollaborationWhereUniqueInput>
    disconnect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    delete?: Enumerable<CompanyCollaborationWhereUniqueInput>
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    update?: Enumerable<CompanyCollaborationUpdateWithWhereUniqueWithoutCollaboratorInput>
    updateMany?: Enumerable<CompanyCollaborationUpdateManyWithWhereWithoutCollaboratorInput>
    deleteMany?: Enumerable<CompanyCollaborationScalarWhereInput>
  }

  export type CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<CompanyCollaborationCreateWithoutCompanyInput>, Enumerable<CompanyCollaborationUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<CompanyCollaborationCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<CompanyCollaborationUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: CompanyCollaborationCreateManyCompanyInputEnvelope
    set?: Enumerable<CompanyCollaborationWhereUniqueInput>
    disconnect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    delete?: Enumerable<CompanyCollaborationWhereUniqueInput>
    connect?: Enumerable<CompanyCollaborationWhereUniqueInput>
    update?: Enumerable<CompanyCollaborationUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<CompanyCollaborationUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<CompanyCollaborationScalarWhereInput>
  }

  export type EntryUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutCompanyInput>, Enumerable<EntryUncheckedCreateWithoutCompanyInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutCompanyInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutCompanyInput>
    createMany?: EntryCreateManyCompanyInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type CompanyCreateNestedOneWithoutCollector_companyInput = {
    create?: XOR<CompanyCreateWithoutCollector_companyInput, CompanyUncheckedCreateWithoutCollector_companyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCollector_companyInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutSource_companyInput = {
    create?: XOR<CompanyCreateWithoutSource_companyInput, CompanyUncheckedCreateWithoutSource_companyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSource_companyInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutCollector_companyNestedInput = {
    create?: XOR<CompanyCreateWithoutCollector_companyInput, CompanyUncheckedCreateWithoutCollector_companyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCollector_companyInput
    upsert?: CompanyUpsertWithoutCollector_companyInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<CompanyUpdateWithoutCollector_companyInput, CompanyUncheckedUpdateWithoutCollector_companyInput>
  }

  export type CompanyUpdateOneRequiredWithoutSource_companyNestedInput = {
    create?: XOR<CompanyCreateWithoutSource_companyInput, CompanyUncheckedCreateWithoutSource_companyInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSource_companyInput
    upsert?: CompanyUpsertWithoutSource_companyInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<CompanyUpdateWithoutSource_companyInput, CompanyUncheckedUpdateWithoutSource_companyInput>
  }

  export type EntryCreateNestedManyWithoutSiteInput = {
    create?: XOR<Enumerable<EntryCreateWithoutSiteInput>, Enumerable<EntryUncheckedCreateWithoutSiteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutSiteInput>
    createMany?: EntryCreateManySiteInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type EntryUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<Enumerable<EntryCreateWithoutSiteInput>, Enumerable<EntryUncheckedCreateWithoutSiteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutSiteInput>
    createMany?: EntryCreateManySiteInputEnvelope
    connect?: Enumerable<EntryWhereUniqueInput>
  }

  export type EntryUpdateManyWithoutSiteNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutSiteInput>, Enumerable<EntryUncheckedCreateWithoutSiteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutSiteInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutSiteInput>
    createMany?: EntryCreateManySiteInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutSiteInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutSiteInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type EntryUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<Enumerable<EntryCreateWithoutSiteInput>, Enumerable<EntryUncheckedCreateWithoutSiteInput>>
    connectOrCreate?: Enumerable<EntryCreateOrConnectWithoutSiteInput>
    upsert?: Enumerable<EntryUpsertWithWhereUniqueWithoutSiteInput>
    createMany?: EntryCreateManySiteInputEnvelope
    set?: Enumerable<EntryWhereUniqueInput>
    disconnect?: Enumerable<EntryWhereUniqueInput>
    delete?: Enumerable<EntryWhereUniqueInput>
    connect?: Enumerable<EntryWhereUniqueInput>
    update?: Enumerable<EntryUpdateWithWhereUniqueWithoutSiteInput>
    updateMany?: Enumerable<EntryUpdateManyWithWhereWithoutSiteInput>
    deleteMany?: Enumerable<EntryScalarWhereInput>
  }

  export type ProvinceCreateNestedOneWithoutCitiesInput = {
    create?: XOR<ProvinceCreateWithoutCitiesInput, ProvinceUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: ProvinceCreateOrConnectWithoutCitiesInput
    connect?: ProvinceWhereUniqueInput
  }

  export type CompanyCreateNestedManyWithoutCityInput = {
    create?: XOR<Enumerable<CompanyCreateWithoutCityInput>, Enumerable<CompanyUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<CompanyCreateOrConnectWithoutCityInput>
    createMany?: CompanyCreateManyCityInputEnvelope
    connect?: Enumerable<CompanyWhereUniqueInput>
  }

  export type CompanyUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<Enumerable<CompanyCreateWithoutCityInput>, Enumerable<CompanyUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<CompanyCreateOrConnectWithoutCityInput>
    createMany?: CompanyCreateManyCityInputEnvelope
    connect?: Enumerable<CompanyWhereUniqueInput>
  }

  export type ProvinceUpdateOneRequiredWithoutCitiesNestedInput = {
    create?: XOR<ProvinceCreateWithoutCitiesInput, ProvinceUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: ProvinceCreateOrConnectWithoutCitiesInput
    upsert?: ProvinceUpsertWithoutCitiesInput
    connect?: ProvinceWhereUniqueInput
    update?: XOR<ProvinceUpdateWithoutCitiesInput, ProvinceUncheckedUpdateWithoutCitiesInput>
  }

  export type CompanyUpdateManyWithoutCityNestedInput = {
    create?: XOR<Enumerable<CompanyCreateWithoutCityInput>, Enumerable<CompanyUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<CompanyCreateOrConnectWithoutCityInput>
    upsert?: Enumerable<CompanyUpsertWithWhereUniqueWithoutCityInput>
    createMany?: CompanyCreateManyCityInputEnvelope
    set?: Enumerable<CompanyWhereUniqueInput>
    disconnect?: Enumerable<CompanyWhereUniqueInput>
    delete?: Enumerable<CompanyWhereUniqueInput>
    connect?: Enumerable<CompanyWhereUniqueInput>
    update?: Enumerable<CompanyUpdateWithWhereUniqueWithoutCityInput>
    updateMany?: Enumerable<CompanyUpdateManyWithWhereWithoutCityInput>
    deleteMany?: Enumerable<CompanyScalarWhereInput>
  }

  export type CompanyUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<Enumerable<CompanyCreateWithoutCityInput>, Enumerable<CompanyUncheckedCreateWithoutCityInput>>
    connectOrCreate?: Enumerable<CompanyCreateOrConnectWithoutCityInput>
    upsert?: Enumerable<CompanyUpsertWithWhereUniqueWithoutCityInput>
    createMany?: CompanyCreateManyCityInputEnvelope
    set?: Enumerable<CompanyWhereUniqueInput>
    disconnect?: Enumerable<CompanyWhereUniqueInput>
    delete?: Enumerable<CompanyWhereUniqueInput>
    connect?: Enumerable<CompanyWhereUniqueInput>
    update?: Enumerable<CompanyUpdateWithWhereUniqueWithoutCityInput>
    updateMany?: Enumerable<CompanyUpdateManyWithWhereWithoutCityInput>
    deleteMany?: Enumerable<CompanyScalarWhereInput>
  }

  export type CityCreateNestedManyWithoutProvinceInput = {
    create?: XOR<Enumerable<CityCreateWithoutProvinceInput>, Enumerable<CityUncheckedCreateWithoutProvinceInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutProvinceInput>
    createMany?: CityCreateManyProvinceInputEnvelope
    connect?: Enumerable<CityWhereUniqueInput>
  }

  export type CityUncheckedCreateNestedManyWithoutProvinceInput = {
    create?: XOR<Enumerable<CityCreateWithoutProvinceInput>, Enumerable<CityUncheckedCreateWithoutProvinceInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutProvinceInput>
    createMany?: CityCreateManyProvinceInputEnvelope
    connect?: Enumerable<CityWhereUniqueInput>
  }

  export type CityUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<Enumerable<CityCreateWithoutProvinceInput>, Enumerable<CityUncheckedCreateWithoutProvinceInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutProvinceInput>
    upsert?: Enumerable<CityUpsertWithWhereUniqueWithoutProvinceInput>
    createMany?: CityCreateManyProvinceInputEnvelope
    set?: Enumerable<CityWhereUniqueInput>
    disconnect?: Enumerable<CityWhereUniqueInput>
    delete?: Enumerable<CityWhereUniqueInput>
    connect?: Enumerable<CityWhereUniqueInput>
    update?: Enumerable<CityUpdateWithWhereUniqueWithoutProvinceInput>
    updateMany?: Enumerable<CityUpdateManyWithWhereWithoutProvinceInput>
    deleteMany?: Enumerable<CityScalarWhereInput>
  }

  export type CityUncheckedUpdateManyWithoutProvinceNestedInput = {
    create?: XOR<Enumerable<CityCreateWithoutProvinceInput>, Enumerable<CityUncheckedCreateWithoutProvinceInput>>
    connectOrCreate?: Enumerable<CityCreateOrConnectWithoutProvinceInput>
    upsert?: Enumerable<CityUpsertWithWhereUniqueWithoutProvinceInput>
    createMany?: CityCreateManyProvinceInputEnvelope
    set?: Enumerable<CityWhereUniqueInput>
    disconnect?: Enumerable<CityWhereUniqueInput>
    delete?: Enumerable<CityWhereUniqueInput>
    connect?: Enumerable<CityWhereUniqueInput>
    update?: Enumerable<CityUpdateWithWhereUniqueWithoutProvinceInput>
    updateMany?: Enumerable<CityUpdateManyWithWhereWithoutProvinceInput>
    deleteMany?: Enumerable<CityScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumWasteTypeFilter = {
    equals?: WasteType
    in?: Enumerable<WasteType>
    notIn?: Enumerable<WasteType>
    not?: NestedEnumWasteTypeFilter | WasteType
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumWasteTypeWithAggregatesFilter = {
    equals?: WasteType
    in?: Enumerable<WasteType>
    notIn?: Enumerable<WasteType>
    not?: NestedEnumWasteTypeWithAggregatesFilter | WasteType
    _count?: NestedIntFilter
    _min?: NestedEnumWasteTypeFilter
    _max?: NestedEnumWasteTypeFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumCompanyTypeFilter = {
    equals?: CompanyType
    in?: Enumerable<CompanyType>
    notIn?: Enumerable<CompanyType>
    not?: NestedEnumCompanyTypeFilter | CompanyType
  }

  export type NestedEnumCompanyTypeWithAggregatesFilter = {
    equals?: CompanyType
    in?: Enumerable<CompanyType>
    notIn?: Enumerable<CompanyType>
    not?: NestedEnumCompanyTypeWithAggregatesFilter | CompanyType
    _count?: NestedIntFilter
    _min?: NestedEnumCompanyTypeFilter
    _max?: NestedEnumCompanyTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type AccountCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EntryCreateWithoutUserInput = {
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste: WasteCreateNestedOneWithoutEntriesInput
    site: SiteCreateNestedOneWithoutEntriesInput
    company: CompanyCreateNestedOneWithoutEntriesInput
  }

  export type EntryUncheckedCreateWithoutUserInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    site_id: number
    company_id: number
  }

  export type EntryCreateOrConnectWithoutUserInput = {
    where: EntryWhereUniqueInput
    create: XOR<EntryCreateWithoutUserInput, EntryUncheckedCreateWithoutUserInput>
  }

  export type EntryCreateManyUserInputEnvelope = {
    data: Enumerable<EntryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutUsersInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city: CityCreateNestedOneWithoutCompaniesInput
    zip_code: string
    company_type: CompanyType
    source_company?: CompanyCollaborationCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationCreateNestedManyWithoutCompanyInput
    entries?: EntryCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsersInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    source_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput
    entries?: EntryUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: IntFilter | number
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: IntFilter | number
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type EntryUpsertWithWhereUniqueWithoutUserInput = {
    where: EntryWhereUniqueInput
    update: XOR<EntryUpdateWithoutUserInput, EntryUncheckedUpdateWithoutUserInput>
    create: XOR<EntryCreateWithoutUserInput, EntryUncheckedCreateWithoutUserInput>
  }

  export type EntryUpdateWithWhereUniqueWithoutUserInput = {
    where: EntryWhereUniqueInput
    data: XOR<EntryUpdateWithoutUserInput, EntryUncheckedUpdateWithoutUserInput>
  }

  export type EntryUpdateManyWithWhereWithoutUserInput = {
    where: EntryScalarWhereInput
    data: XOR<EntryUpdateManyMutationInput, EntryUncheckedUpdateManyWithoutEntriesInput>
  }

  export type EntryScalarWhereInput = {
    AND?: Enumerable<EntryScalarWhereInput>
    OR?: Enumerable<EntryScalarWhereInput>
    NOT?: Enumerable<EntryScalarWhereInput>
    id?: IntFilter | number
    collaborator?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    weight?: FloatFilter | number
    waste_id?: IntFilter | number
    user_id?: StringFilter | string
    site_id?: IntFilter | number
    company_id?: IntFilter | number
  }

  export type CompanyUpsertWithoutUsersInput = {
    update: XOR<CompanyUpdateWithoutUsersInput, CompanyUncheckedUpdateWithoutUsersInput>
    create: XOR<CompanyCreateWithoutUsersInput, CompanyUncheckedCreateWithoutUsersInput>
  }

  export type CompanyUpdateWithoutUsersInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city?: CityUpdateOneRequiredWithoutCompaniesNestedInput
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    source_company?: CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUpdateManyWithoutCompanyNestedInput
    entries?: EntryUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    source_company?: CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput
    entries?: EntryUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EntryCreateWithoutWasteInput = {
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    user: UserCreateNestedOneWithoutEntriesInput
    site: SiteCreateNestedOneWithoutEntriesInput
    company: CompanyCreateNestedOneWithoutEntriesInput
  }

  export type EntryUncheckedCreateWithoutWasteInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    user_id: string
    site_id: number
    company_id: number
  }

  export type EntryCreateOrConnectWithoutWasteInput = {
    where: EntryWhereUniqueInput
    create: XOR<EntryCreateWithoutWasteInput, EntryUncheckedCreateWithoutWasteInput>
  }

  export type EntryCreateManyWasteInputEnvelope = {
    data: Enumerable<EntryCreateManyWasteInput>
    skipDuplicates?: boolean
  }

  export type EntryUpsertWithWhereUniqueWithoutWasteInput = {
    where: EntryWhereUniqueInput
    update: XOR<EntryUpdateWithoutWasteInput, EntryUncheckedUpdateWithoutWasteInput>
    create: XOR<EntryCreateWithoutWasteInput, EntryUncheckedCreateWithoutWasteInput>
  }

  export type EntryUpdateWithWhereUniqueWithoutWasteInput = {
    where: EntryWhereUniqueInput
    data: XOR<EntryUpdateWithoutWasteInput, EntryUncheckedUpdateWithoutWasteInput>
  }

  export type EntryUpdateManyWithWhereWithoutWasteInput = {
    where: EntryScalarWhereInput
    data: XOR<EntryUpdateManyMutationInput, EntryUncheckedUpdateManyWithoutEntriesInput>
  }

  export type WasteCreateWithoutEntriesInput = {
    waste: string
    waste_type: WasteType
  }

  export type WasteUncheckedCreateWithoutEntriesInput = {
    id?: number
    waste: string
    waste_type: WasteType
  }

  export type WasteCreateOrConnectWithoutEntriesInput = {
    where: WasteWhereUniqueInput
    create: XOR<WasteCreateWithoutEntriesInput, WasteUncheckedCreateWithoutEntriesInput>
  }

  export type UserCreateWithoutEntriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutEntriesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    company_id?: number | null
  }

  export type UserCreateOrConnectWithoutEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEntriesInput, UserUncheckedCreateWithoutEntriesInput>
  }

  export type SiteCreateWithoutEntriesInput = {
    site: string
  }

  export type SiteUncheckedCreateWithoutEntriesInput = {
    id?: number
    site: string
  }

  export type SiteCreateOrConnectWithoutEntriesInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutEntriesInput, SiteUncheckedCreateWithoutEntriesInput>
  }

  export type CompanyCreateWithoutEntriesInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city: CityCreateNestedOneWithoutCompaniesInput
    zip_code: string
    company_type: CompanyType
    users?: UserCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutEntriesInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutEntriesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutEntriesInput, CompanyUncheckedCreateWithoutEntriesInput>
  }

  export type WasteUpsertWithoutEntriesInput = {
    update: XOR<WasteUpdateWithoutEntriesInput, WasteUncheckedUpdateWithoutEntriesInput>
    create: XOR<WasteCreateWithoutEntriesInput, WasteUncheckedCreateWithoutEntriesInput>
  }

  export type WasteUpdateWithoutEntriesInput = {
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
  }

  export type WasteUncheckedUpdateWithoutEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    waste?: StringFieldUpdateOperationsInput | string
    waste_type?: EnumWasteTypeFieldUpdateOperationsInput | WasteType
  }

  export type UserUpsertWithoutEntriesInput = {
    update: XOR<UserUpdateWithoutEntriesInput, UserUncheckedUpdateWithoutEntriesInput>
    create: XOR<UserCreateWithoutEntriesInput, UserUncheckedCreateWithoutEntriesInput>
  }

  export type UserUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SiteUpsertWithoutEntriesInput = {
    update: XOR<SiteUpdateWithoutEntriesInput, SiteUncheckedUpdateWithoutEntriesInput>
    create: XOR<SiteCreateWithoutEntriesInput, SiteUncheckedCreateWithoutEntriesInput>
  }

  export type SiteUpdateWithoutEntriesInput = {
    site?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUncheckedUpdateWithoutEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    site?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUpsertWithoutEntriesInput = {
    update: XOR<CompanyUpdateWithoutEntriesInput, CompanyUncheckedUpdateWithoutEntriesInput>
    create: XOR<CompanyCreateWithoutEntriesInput, CompanyUncheckedCreateWithoutEntriesInput>
  }

  export type CompanyUpdateWithoutEntriesInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city?: CityUpdateOneRequiredWithoutCompaniesNestedInput
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CityCreateWithoutCompaniesInput = {
    city: string
    province: ProvinceCreateNestedOneWithoutCitiesInput
  }

  export type CityUncheckedCreateWithoutCompaniesInput = {
    id?: number
    city: string
    province_id: number
  }

  export type CityCreateOrConnectWithoutCompaniesInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutCompaniesInput, CityUncheckedCreateWithoutCompaniesInput>
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    entries?: EntryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    entries?: EntryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: Enumerable<UserCreateManyCompanyInput>
    skipDuplicates?: boolean
  }

  export type CompanyCollaborationCreateWithoutCollaboratorInput = {
    company: CompanyCreateNestedOneWithoutCollector_companyInput
  }

  export type CompanyCollaborationUncheckedCreateWithoutCollaboratorInput = {
    id?: number
    source_id: number
  }

  export type CompanyCollaborationCreateOrConnectWithoutCollaboratorInput = {
    where: CompanyCollaborationWhereUniqueInput
    create: XOR<CompanyCollaborationCreateWithoutCollaboratorInput, CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>
  }

  export type CompanyCollaborationCreateManyCollaboratorInputEnvelope = {
    data: Enumerable<CompanyCollaborationCreateManyCollaboratorInput>
    skipDuplicates?: boolean
  }

  export type CompanyCollaborationCreateWithoutCompanyInput = {
    collaborator: CompanyCreateNestedOneWithoutSource_companyInput
  }

  export type CompanyCollaborationUncheckedCreateWithoutCompanyInput = {
    id?: number
    collaborator_id: number
  }

  export type CompanyCollaborationCreateOrConnectWithoutCompanyInput = {
    where: CompanyCollaborationWhereUniqueInput
    create: XOR<CompanyCollaborationCreateWithoutCompanyInput, CompanyCollaborationUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyCollaborationCreateManyCompanyInputEnvelope = {
    data: Enumerable<CompanyCollaborationCreateManyCompanyInput>
    skipDuplicates?: boolean
  }

  export type EntryCreateWithoutCompanyInput = {
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste: WasteCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutEntriesInput
    site: SiteCreateNestedOneWithoutEntriesInput
  }

  export type EntryUncheckedCreateWithoutCompanyInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    site_id: number
  }

  export type EntryCreateOrConnectWithoutCompanyInput = {
    where: EntryWhereUniqueInput
    create: XOR<EntryCreateWithoutCompanyInput, EntryUncheckedCreateWithoutCompanyInput>
  }

  export type EntryCreateManyCompanyInputEnvelope = {
    data: Enumerable<EntryCreateManyCompanyInput>
    skipDuplicates?: boolean
  }

  export type CityUpsertWithoutCompaniesInput = {
    update: XOR<CityUpdateWithoutCompaniesInput, CityUncheckedUpdateWithoutCompaniesInput>
    create: XOR<CityCreateWithoutCompaniesInput, CityUncheckedCreateWithoutCompaniesInput>
  }

  export type CityUpdateWithoutCompaniesInput = {
    city?: StringFieldUpdateOperationsInput | string
    province?: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
  }

  export type CityUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    province_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    role?: EnumRoleFilter | Role
    company_id?: IntNullableFilter | number | null
  }

  export type CompanyCollaborationUpsertWithWhereUniqueWithoutCollaboratorInput = {
    where: CompanyCollaborationWhereUniqueInput
    update: XOR<CompanyCollaborationUpdateWithoutCollaboratorInput, CompanyCollaborationUncheckedUpdateWithoutCollaboratorInput>
    create: XOR<CompanyCollaborationCreateWithoutCollaboratorInput, CompanyCollaborationUncheckedCreateWithoutCollaboratorInput>
  }

  export type CompanyCollaborationUpdateWithWhereUniqueWithoutCollaboratorInput = {
    where: CompanyCollaborationWhereUniqueInput
    data: XOR<CompanyCollaborationUpdateWithoutCollaboratorInput, CompanyCollaborationUncheckedUpdateWithoutCollaboratorInput>
  }

  export type CompanyCollaborationUpdateManyWithWhereWithoutCollaboratorInput = {
    where: CompanyCollaborationScalarWhereInput
    data: XOR<CompanyCollaborationUpdateManyMutationInput, CompanyCollaborationUncheckedUpdateManyWithoutSource_companyInput>
  }

  export type CompanyCollaborationScalarWhereInput = {
    AND?: Enumerable<CompanyCollaborationScalarWhereInput>
    OR?: Enumerable<CompanyCollaborationScalarWhereInput>
    NOT?: Enumerable<CompanyCollaborationScalarWhereInput>
    id?: IntFilter | number
    source_id?: IntFilter | number
    collaborator_id?: IntFilter | number
  }

  export type CompanyCollaborationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyCollaborationWhereUniqueInput
    update: XOR<CompanyCollaborationUpdateWithoutCompanyInput, CompanyCollaborationUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyCollaborationCreateWithoutCompanyInput, CompanyCollaborationUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyCollaborationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyCollaborationWhereUniqueInput
    data: XOR<CompanyCollaborationUpdateWithoutCompanyInput, CompanyCollaborationUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyCollaborationUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyCollaborationScalarWhereInput
    data: XOR<CompanyCollaborationUpdateManyMutationInput, CompanyCollaborationUncheckedUpdateManyWithoutCollector_companyInput>
  }

  export type EntryUpsertWithWhereUniqueWithoutCompanyInput = {
    where: EntryWhereUniqueInput
    update: XOR<EntryUpdateWithoutCompanyInput, EntryUncheckedUpdateWithoutCompanyInput>
    create: XOR<EntryCreateWithoutCompanyInput, EntryUncheckedCreateWithoutCompanyInput>
  }

  export type EntryUpdateWithWhereUniqueWithoutCompanyInput = {
    where: EntryWhereUniqueInput
    data: XOR<EntryUpdateWithoutCompanyInput, EntryUncheckedUpdateWithoutCompanyInput>
  }

  export type EntryUpdateManyWithWhereWithoutCompanyInput = {
    where: EntryScalarWhereInput
    data: XOR<EntryUpdateManyMutationInput, EntryUncheckedUpdateManyWithoutEntriesInput>
  }

  export type CompanyCreateWithoutCollector_companyInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city: CityCreateNestedOneWithoutCompaniesInput
    zip_code: string
    company_type: CompanyType
    users?: UserCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationCreateNestedManyWithoutCollaboratorInput
    entries?: EntryCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCollector_companyInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput
    entries?: EntryUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCollector_companyInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCollector_companyInput, CompanyUncheckedCreateWithoutCollector_companyInput>
  }

  export type CompanyCreateWithoutSource_companyInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city: CityCreateNestedOneWithoutCompaniesInput
    zip_code: string
    company_type: CompanyType
    users?: UserCreateNestedManyWithoutCompanyInput
    collector_company?: CompanyCollaborationCreateNestedManyWithoutCompanyInput
    entries?: EntryCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSource_companyInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    city_id: number
    zip_code: string
    company_type: CompanyType
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    collector_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput
    entries?: EntryUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSource_companyInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSource_companyInput, CompanyUncheckedCreateWithoutSource_companyInput>
  }

  export type CompanyUpsertWithoutCollector_companyInput = {
    update: XOR<CompanyUpdateWithoutCollector_companyInput, CompanyUncheckedUpdateWithoutCollector_companyInput>
    create: XOR<CompanyCreateWithoutCollector_companyInput, CompanyUncheckedCreateWithoutCollector_companyInput>
  }

  export type CompanyUpdateWithoutCollector_companyInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city?: CityUpdateOneRequiredWithoutCompaniesNestedInput
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput
    entries?: EntryUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCollector_companyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput
    entries?: EntryUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUpsertWithoutSource_companyInput = {
    update: XOR<CompanyUpdateWithoutSource_companyInput, CompanyUncheckedUpdateWithoutSource_companyInput>
    create: XOR<CompanyCreateWithoutSource_companyInput, CompanyUncheckedCreateWithoutSource_companyInput>
  }

  export type CompanyUpdateWithoutSource_companyInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city?: CityUpdateOneRequiredWithoutCompaniesNestedInput
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUpdateManyWithoutCompanyNestedInput
    collector_company?: CompanyCollaborationUpdateManyWithoutCompanyNestedInput
    entries?: EntryUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSource_companyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    collector_company?: CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput
    entries?: EntryUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EntryCreateWithoutSiteInput = {
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste: WasteCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutEntriesInput
    company: CompanyCreateNestedOneWithoutEntriesInput
  }

  export type EntryUncheckedCreateWithoutSiteInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    company_id: number
  }

  export type EntryCreateOrConnectWithoutSiteInput = {
    where: EntryWhereUniqueInput
    create: XOR<EntryCreateWithoutSiteInput, EntryUncheckedCreateWithoutSiteInput>
  }

  export type EntryCreateManySiteInputEnvelope = {
    data: Enumerable<EntryCreateManySiteInput>
    skipDuplicates?: boolean
  }

  export type EntryUpsertWithWhereUniqueWithoutSiteInput = {
    where: EntryWhereUniqueInput
    update: XOR<EntryUpdateWithoutSiteInput, EntryUncheckedUpdateWithoutSiteInput>
    create: XOR<EntryCreateWithoutSiteInput, EntryUncheckedCreateWithoutSiteInput>
  }

  export type EntryUpdateWithWhereUniqueWithoutSiteInput = {
    where: EntryWhereUniqueInput
    data: XOR<EntryUpdateWithoutSiteInput, EntryUncheckedUpdateWithoutSiteInput>
  }

  export type EntryUpdateManyWithWhereWithoutSiteInput = {
    where: EntryScalarWhereInput
    data: XOR<EntryUpdateManyMutationInput, EntryUncheckedUpdateManyWithoutEntriesInput>
  }

  export type ProvinceCreateWithoutCitiesInput = {
    province: string
  }

  export type ProvinceUncheckedCreateWithoutCitiesInput = {
    id?: number
    province: string
  }

  export type ProvinceCreateOrConnectWithoutCitiesInput = {
    where: ProvinceWhereUniqueInput
    create: XOR<ProvinceCreateWithoutCitiesInput, ProvinceUncheckedCreateWithoutCitiesInput>
  }

  export type CompanyCreateWithoutCityInput = {
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    zip_code: string
    company_type: CompanyType
    users?: UserCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationCreateNestedManyWithoutCompanyInput
    entries?: EntryCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCityInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    zip_code: string
    company_type: CompanyType
    users?: UserUncheckedCreateNestedManyWithoutCompanyInput
    source_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCollaboratorInput
    collector_company?: CompanyCollaborationUncheckedCreateNestedManyWithoutCompanyInput
    entries?: EntryUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCityInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCityInput, CompanyUncheckedCreateWithoutCityInput>
  }

  export type CompanyCreateManyCityInputEnvelope = {
    data: Enumerable<CompanyCreateManyCityInput>
    skipDuplicates?: boolean
  }

  export type ProvinceUpsertWithoutCitiesInput = {
    update: XOR<ProvinceUpdateWithoutCitiesInput, ProvinceUncheckedUpdateWithoutCitiesInput>
    create: XOR<ProvinceCreateWithoutCitiesInput, ProvinceUncheckedCreateWithoutCitiesInput>
  }

  export type ProvinceUpdateWithoutCitiesInput = {
    province?: StringFieldUpdateOperationsInput | string
  }

  export type ProvinceUncheckedUpdateWithoutCitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    province?: StringFieldUpdateOperationsInput | string
  }

  export type CompanyUpsertWithWhereUniqueWithoutCityInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutCityInput, CompanyUncheckedUpdateWithoutCityInput>
    create: XOR<CompanyCreateWithoutCityInput, CompanyUncheckedCreateWithoutCityInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutCityInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutCityInput, CompanyUncheckedUpdateWithoutCityInput>
  }

  export type CompanyUpdateManyWithWhereWithoutCityInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: Enumerable<CompanyScalarWhereInput>
    OR?: Enumerable<CompanyScalarWhereInput>
    NOT?: Enumerable<CompanyScalarWhereInput>
    id?: IntFilter | number
    company?: StringFilter | string
    admin_code?: StringFilter | string
    user_code?: StringFilter | string
    address_line_1?: StringFilter | string
    address_line_2?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    city_id?: IntFilter | number
    zip_code?: StringFilter | string
    company_type?: EnumCompanyTypeFilter | CompanyType
  }

  export type CityCreateWithoutProvinceInput = {
    city: string
    Companies?: CompanyCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateWithoutProvinceInput = {
    id?: number
    city: string
    Companies?: CompanyUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityCreateOrConnectWithoutProvinceInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutProvinceInput, CityUncheckedCreateWithoutProvinceInput>
  }

  export type CityCreateManyProvinceInputEnvelope = {
    data: Enumerable<CityCreateManyProvinceInput>
    skipDuplicates?: boolean
  }

  export type CityUpsertWithWhereUniqueWithoutProvinceInput = {
    where: CityWhereUniqueInput
    update: XOR<CityUpdateWithoutProvinceInput, CityUncheckedUpdateWithoutProvinceInput>
    create: XOR<CityCreateWithoutProvinceInput, CityUncheckedCreateWithoutProvinceInput>
  }

  export type CityUpdateWithWhereUniqueWithoutProvinceInput = {
    where: CityWhereUniqueInput
    data: XOR<CityUpdateWithoutProvinceInput, CityUncheckedUpdateWithoutProvinceInput>
  }

  export type CityUpdateManyWithWhereWithoutProvinceInput = {
    where: CityScalarWhereInput
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyWithoutCitiesInput>
  }

  export type CityScalarWhereInput = {
    AND?: Enumerable<CityScalarWhereInput>
    OR?: Enumerable<CityScalarWhereInput>
    NOT?: Enumerable<CityScalarWhereInput>
    id?: IntFilter | number
    city?: StringFilter | string
    province_id?: IntFilter | number
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    sessions?: SessionCreateNestedManyWithoutUserInput
    entries?: EntryCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    entries?: EntryUncheckedCreateNestedManyWithoutUserInput
    company_id?: number | null
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    sessions?: SessionUpdateManyWithoutUserNestedInput
    entries?: EntryUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    entries?: EntryUncheckedUpdateManyWithoutUserNestedInput
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountCreateNestedManyWithoutUserInput
    entries?: EntryCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    entries?: EntryUncheckedCreateNestedManyWithoutUserInput
    company_id?: number | null
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    entries?: EntryUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    entries?: EntryUncheckedUpdateManyWithoutUserNestedInput
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateManyUserInput = {
    id?: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
  }

  export type EntryCreateManyUserInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    site_id: number
    company_id: number
  }

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EntryUpdateWithoutUserInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste?: WasteUpdateOneRequiredWithoutEntriesNestedInput
    site?: SiteUpdateOneRequiredWithoutEntriesNestedInput
    company?: CompanyUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type EntryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    site_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type EntryUncheckedUpdateManyWithoutEntriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    site_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type EntryCreateManyWasteInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    user_id: string
    site_id: number
    company_id: number
  }

  export type EntryUpdateWithoutWasteInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutEntriesNestedInput
    site?: SiteUpdateOneRequiredWithoutEntriesNestedInput
    company?: CompanyUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type EntryUncheckedUpdateWithoutWasteInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    site_id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyCompanyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    image?: string | null
    role?: Role
  }

  export type CompanyCollaborationCreateManyCollaboratorInput = {
    id?: number
    source_id: number
  }

  export type CompanyCollaborationCreateManyCompanyInput = {
    id?: number
    collaborator_id: number
  }

  export type EntryCreateManyCompanyInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    site_id: number
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    entries?: EntryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    entries?: EntryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type CompanyCollaborationUpdateWithoutCollaboratorInput = {
    company?: CompanyUpdateOneRequiredWithoutCollector_companyNestedInput
  }

  export type CompanyCollaborationUncheckedUpdateWithoutCollaboratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCollaborationUncheckedUpdateManyWithoutSource_companyInput = {
    id?: IntFieldUpdateOperationsInput | number
    source_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCollaborationUpdateWithoutCompanyInput = {
    collaborator?: CompanyUpdateOneRequiredWithoutSource_companyNestedInput
  }

  export type CompanyCollaborationUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCollaborationUncheckedUpdateManyWithoutCollector_companyInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator_id?: IntFieldUpdateOperationsInput | number
  }

  export type EntryUpdateWithoutCompanyInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste?: WasteUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutEntriesNestedInput
    site?: SiteUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type EntryUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    site_id?: IntFieldUpdateOperationsInput | number
  }

  export type EntryCreateManySiteInput = {
    id?: number
    collaborator: string
    created_at?: Date | string
    updated_at?: Date | string
    weight: number
    waste_id: number
    user_id: string
    company_id: number
  }

  export type EntryUpdateWithoutSiteInput = {
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste?: WasteUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutEntriesNestedInput
    company?: CompanyUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type EntryUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    collaborator?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    waste_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyCreateManyCityInput = {
    id?: number
    company: string
    admin_code: string
    user_code: string
    address_line_1: string
    address_line_2: string
    email: string
    phone: string
    zip_code: string
    company_type: CompanyType
  }

  export type CompanyUpdateWithoutCityInput = {
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUpdateManyWithoutCompanyNestedInput
    entries?: EntryUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCityInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
    users?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    source_company?: CompanyCollaborationUncheckedUpdateManyWithoutCollaboratorNestedInput
    collector_company?: CompanyCollaborationUncheckedUpdateManyWithoutCompanyNestedInput
    entries?: EntryUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    company?: StringFieldUpdateOperationsInput | string
    admin_code?: StringFieldUpdateOperationsInput | string
    user_code?: StringFieldUpdateOperationsInput | string
    address_line_1?: StringFieldUpdateOperationsInput | string
    address_line_2?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    company_type?: EnumCompanyTypeFieldUpdateOperationsInput | CompanyType
  }

  export type CityCreateManyProvinceInput = {
    id?: number
    city: string
  }

  export type CityUpdateWithoutProvinceInput = {
    city?: StringFieldUpdateOperationsInput | string
    Companies?: CompanyUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateWithoutProvinceInput = {
    id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    Companies?: CompanyUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateManyWithoutCitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}