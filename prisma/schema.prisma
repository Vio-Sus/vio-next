// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  first_name    String?
  last_name     String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          User_Role[]
  accounts      Account[]
  sessions      Session[]
}

model Role {
  id   Int         @id @default(autoincrement())
  User User_Role[]
}

model User_Role {
  user_role_id Int    @id @default(autoincrement())
  role         Role   @relation(fields: [role_id], references: [id])
  role_id      Int
  user         User   @relation(fields: [user_id], references: [id])
  user_id      String
}

model Site {
  id             Int     @id @default(autoincrement())
  site_name      String
  address_line_1 String
  address_line_2 String
  city           City    @relation(fields: [city_id], references: [id])
  city_id        Int
  company        Company @relation(fields: [company_id], references: [id])
  company_id     Int
}

model City {
  id          Int      @id @default(autoincrement())
  city        String
  province    Province @relation(fields: [province_id], references: [id])
  province_id Int
  Address     Site[]
}

model Province {
  id       Int    @id @default(autoincrement())
  province String
  City     City[]
}

model Company {
  id              Int          @id @default(autoincrement())
  company         String
  Site            Site[]
  Company_type    Company_type @relation(fields: [company_type_Id], references: [id])
  company_type_Id Int
}

model Company_type {
  id          Int       @id @default(autoincrement())
  companyType String
  Company     Company[]
}

model Entry {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  weight       Float
  collaborator String
  waste        Waste    @relation(fields: [waste_id], references: [id])
  waste_id     Int
}

model Waste {
  id            Int        @id @default(autoincrement())
  waste         String
  entry         Entry[]
  waste_type    Waste_type @relation(fields: [waste_type_id], references: [id])
  waste_type_id Int
}

model Waste_type {
  id         Int     @id @default(autoincrement())
  waste_type String
  Waste      Waste[]
}

// Next Auth Models + user relation
model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
