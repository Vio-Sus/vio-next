// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ROOT
  ADMIN
  USER
  TEMP_
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(TEMP_)
  accounts      Account[]
  sessions      Session[]
  entries       Entry[]
  company       Company?  @relation(fields: [company_id], references: [id])
  company_id    Int?
}

enum WasteType {
  GENERAL_GARBAGE
  FOODWASTE
  GREENWASTE
  CARDBOARD
  CLEAN_WOOD
  MIXED_PAPER
  MIXED_CONTAINERS
  STYROFOAM
  SOFT_PLASTICS
  OFPP_
  APPLIANCES
  E_WASTE
  LIGHTS
  BATTERIES
  MATTRESSES
  GLASS
  NEW_GYPSUM
  METAL
  CONCRETE
}

model Waste {
  id         Int       @id @default(autoincrement())
  waste      String
  waste_type WasteType
  entries    Entry[]
}

model Entry {
  id                       Int                   @id @default(autoincrement())
  collaborator             String
  created_at               DateTime              @default(now())
  updated_at               DateTime              @updatedAt
  weight                   Float
  waste                    Waste                 @relation(fields: [waste_id], references: [id])
  waste_id                 Int
  user                     User                  @relation(fields: [user_id], references: [id])
  user_id                  String
  site                     Site                  @relation(fields: [site_id], references: [id])
  site_id                  Int
  CompanyCollaboration     CompanyCollaboration? @relation(fields: [company_collaboration_id], references: [id])
  company_collaboration_id Int?
}

enum CompanyType {
  COLLECTOR
  SOURCE
}

model Company {
  id                Int                    @id @default(autoincrement())
  company           String                 @unique
  admin_code        String
  user_code         String
  address_line_1    String
  address_line_2    String
  email             String
  phone             String
  city              City                   @relation(fields: [city_id], references: [id])
  city_id           Int
  zip_code          String
  company_type      CompanyType
  users             User[]
  source_company    CompanyCollaboration[] @relation("company_collaborators")
  collector_company CompanyCollaboration[] @relation("company_collaborations")

  @@map(name: "companies")
}

model CompanyCollaboration {
  id              Int     @id @default(autoincrement())
  company         Company @relation("company_collaborations", fields: [source_id], references: [id])
  source_id       Int
  collaborator    Company @relation("company_collaborators", fields: [collaborator_id], references: [id])
  collaborator_id Int
  entries         Entry[]

  @@unique([source_id, collaborator_id])
  @@map(name: "company_collaborations")
}

model Site {
  id      Int     @id @default(autoincrement())
  site    String
  entries Entry[]
}

model City {
  id          Int       @id @default(autoincrement())
  city        String
  province    Province  @relation(fields: [province_id], references: [id])
  province_id Int
  Companies   Company[]

  @@unique([city])
}

model Province {
  id       Int    @id @default(autoincrement())
  province String
  cities   City[]

  @@unique([province])
}

// Next Auth Models + user relation
model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model testingData {
  id           Int      @id @default(autoincrement())
  name         String  
  creationTime DateTime @default(now())
  jsonArray    Json?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
